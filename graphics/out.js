!function(t){var e={};function i(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(r,n,function(e){return t[e]}.bind(null,n));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=27)}([function(t,e,i){"use strict";(function(t,r){i.d(e,"g",function(){return n}),i.d(e,"i",function(){return a}),i.d(e,"h",function(){return s}),i.d(e,"e",function(){return l}),i.d(e,"a",function(){return h}),i.d(e,"b",function(){return u}),i.d(e,"c",function(){return c}),i.d(e,"d",function(){return f}),i.d(e,"f",function(){return p});
/*!
 * VERSION: 2.0.2
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 *
 * @author: Jack Doyle, jack@greensock.com
 */
var n="undefined"!=typeof window?window:t.exports&&void 0!==r?r:{},s=function(t,e){var i={},r=t.document,n=t.GreenSockGlobals=t.GreenSockGlobals||t;if(n.TweenLite)return n.TweenLite;var s,a,o,l,h,u=function(t){var e,i=t.split("."),r=n;for(e=0;e<i.length;e++)r[i[e]]=r=r[i[e]]||{};return r},c=u("com.greensock"),f=function(t){var e,i=[],r=t.length;for(e=0;e!==r;i.push(t[e++]));return i},p=function(){},d=function(){var t=Object.prototype.toString,e=t.call([]);return function(i){return null!=i&&(i instanceof Array||"object"==typeof i&&!!i.push&&t.call(i)===e)}}(),_={},m=function(t,e,r,s){this.sc=_[t]?_[t].sc:[],_[t]=this,this.gsClass=null,this.func=r;var a=[];this.check=function(o){for(var l,h,c,f,p=e.length,d=p;--p>-1;)(l=_[e[p]]||new m(e[p],[])).gsClass?(a[p]=l.gsClass,d--):o&&l.sc.push(this);if(0===d&&r)for(c=(h=("com.greensock."+t).split(".")).pop(),f=u(h.join("."))[c]=this.gsClass=r.apply(r,a),s&&(n[c]=i[c]=f),p=0;p<this.sc.length;p++)this.sc[p].check()},this.check(!0)},g=t._gsDefine=function(t,e,i,r){return new m(t,e,i,r)},y=c._class=function(t,e,i){return e=e||function(){},g(t,[],function(){return e},i),e};g.globals=n;var v=[0,0,1,1],b=y("easing.Ease",function(t,e,i,r){this._func=t,this._type=i||0,this._power=r||0,this._params=e?v.concat(e):v},!0),x=b.map={},T=b.register=function(t,e,i,r){for(var n,s,a,o,l=e.split(","),h=l.length,u=(i||"easeIn,easeOut,easeInOut").split(",");--h>-1;)for(s=l[h],n=r?y("easing."+s,null,!0):c.easing[s]||{},a=u.length;--a>-1;)o=u[a],x[s+"."+o]=x[o+s]=n[o]=t.getRatio?t:t[o]||new t};for((o=b.prototype)._calcEnd=!1,o.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,r=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?r*=r:2===i?r*=r*r:3===i?r*=r*r*r:4===i&&(r*=r*r*r*r),1===e?1-r:2===e?r:t<.5?r/2:1-r/2},a=(s=["Linear","Quad","Cubic","Quart","Quint,Strong"]).length;--a>-1;)o=s[a]+",Power"+a,T(new b(null,null,1,a),o,"easeOut",!0),T(new b(null,null,2,a),o,"easeIn"+(0===a?",easeNone":"")),T(new b(null,null,3,a),o,"easeInOut");x.linear=c.easing.Linear.easeIn,x.swing=c.easing.Quad.easeInOut;var w=y("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});(o=w.prototype).addEventListener=function(t,e,i,r,n){n=n||0;var s,a,o=this._listeners[t],u=0;for(this!==l||h||l.wake(),null==o&&(this._listeners[t]=o=[]),a=o.length;--a>-1;)(s=o[a]).c===e&&s.s===i?o.splice(a,1):0===u&&s.pr<n&&(u=a+1);o.splice(u,0,{c:e,s:i,up:r,pr:n})},o.removeEventListener=function(t,e){var i,r=this._listeners[t];if(r)for(i=r.length;--i>-1;)if(r[i].c===e)return void r.splice(i,1)},o.dispatchEvent=function(t){var e,i,r,n=this._listeners[t];if(n)for((e=n.length)>1&&(n=n.slice(0)),i=this._eventTarget;--e>-1;)(r=n[e])&&(r.up?r.c.call(r.s||i,{type:t,target:i}):r.c.call(r.s||i))};var P=t.requestAnimationFrame,S=t.cancelAnimationFrame,C=Date.now||function(){return(new Date).getTime()},O=C();for(a=(s=["ms","moz","webkit","o"]).length;--a>-1&&!P;)P=t[s[a]+"RequestAnimationFrame"],S=t[s[a]+"CancelAnimationFrame"]||t[s[a]+"CancelRequestAnimationFrame"];y("Ticker",function(t,e){var i,n,s,a,o,u=this,c=C(),f=!(!1===e||!P)&&"auto",d=500,_=33,m=function(t){var e,r,l=C()-O;l>d&&(c+=l-_),O+=l,u.time=(O-c)/1e3,e=u.time-o,(!i||e>0||!0===t)&&(u.frame++,o+=e+(e>=a?.004:a-e),r=!0),!0!==t&&(s=n(m)),r&&u.dispatchEvent("tick")};w.call(u),u.time=u.frame=0,u.tick=function(){m(!0)},u.lagSmoothing=function(t,e){if(!arguments.length)return d<1e10;d=t||1e10,_=Math.min(e,d,0)},u.sleep=function(){null!=s&&(f&&S?S(s):clearTimeout(s),n=p,s=null,u===l&&(h=!1))},u.wake=function(t){null!==s?u.sleep():t?c+=-O+(O=C()):u.frame>10&&(O=C()-d+5),n=0===i?p:f&&P?P:function(t){return setTimeout(t,1e3*(o-u.time)+1|0)},u===l&&(h=!0),m(2)},u.fps=function(t){if(!arguments.length)return i;a=1/((i=t)||60),o=this.time+a,u.wake()},u.useRAF=function(t){if(!arguments.length)return f;u.sleep(),f=t,u.fps(i)},u.fps(t),setTimeout(function(){"auto"===f&&u.frame<5&&"hidden"!==(r||{}).visibilityState&&u.useRAF(!1)},1500)}),(o=c.Ticker.prototype=new c.events.EventDispatcher).constructor=c.Ticker;var k=y("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=!0===e.immediateRender,this.data=e.data,this._reversed=!0===e.reversed,U){h||l.wake();var i=this.vars.useFrames?H:U;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});l=k.ticker=new c.Ticker,(o=k.prototype)._dirty=o._gc=o._initted=o._paused=!1,o._totalTime=o._time=0,o._rawPrevTime=-1,o._next=o._last=o._onUpdate=o._timeline=o.timeline=null,o._paused=!1;var R=function(){h&&C()-O>2e3&&("hidden"!==(r||{}).visibilityState||!l.lagSmoothing())&&l.wake();var t=setTimeout(R,2e3);t.unref&&t.unref()};R(),o.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},o.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},o.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},o.seek=function(t,e){return this.totalTime(Number(t),!1!==e)},o.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,!1!==e,!0)},o.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},o.render=function(t,e,i){},o.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},o.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime(!0))>=i&&t<i+this.totalDuration()/this._timeScale-1e-7},o._enabled=function(t,e){return h||l.wake(),this._gc=!t,this._active=this.isActive(),!0!==e&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},o._kill=function(t,e){return this._enabled(!1,!1)},o.kill=function(t,e){return this._kill(t,e),this},o._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},o._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},o._callback=function(t){var e=this.vars,i=e[t],r=e[t+"Params"],n=e[t+"Scope"]||e.callbackScope||this;switch(r?r.length:0){case 0:i.call(n);break;case 1:i.call(n,r[0]);break;case 2:i.call(n,r[0],r[1]);break;default:i.apply(n,r)}},o.eventCallback=function(t,e,i,r){if("on"===(t||"").substr(0,2)){var n=this.vars;if(1===arguments.length)return n[t];null==e?delete n[t]:(n[t]=e,n[t+"Params"]=d(i)&&-1!==i.join("").indexOf("{self}")?this._swapSelfInParams(i):i,n[t+"Scope"]=r),"onUpdate"===t&&(this._onUpdate=e)}return this},o.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},o.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},o.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},o.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},o.totalTime=function(t,e,i){if(h||l.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var r=this._totalDuration,n=this._timeline;if(t>r&&!i&&(t=r),this._startTime=(this._paused?this._pauseTime:n._time)-(this._reversed?r-t:t)/this._timeScale,n._dirty||this._uncache(!1),n._timeline)for(;n._timeline;)n._timeline._time!==(n._startTime+n._totalTime)/n._timeScale&&n.totalTime(n._totalTime,!0),n=n._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(D.length&&G(),this.render(t,e,!1),D.length&&G())}return this},o.progress=o.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},o.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},o.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},o.timeScale=function(t){if(!arguments.length)return this._timeScale;var e,i;for(t=t||1e-10,this._timeline&&this._timeline.smoothChildTiming&&(i=(e=this._pauseTime)||0===e?e:this._timeline.totalTime(),this._startTime=i-(i-this._startTime)*this._timeScale/t),this._timeScale=t,i=this.timeline;i&&i.timeline;)i._dirty=!0,i.totalDuration(),i=i.timeline;return this},o.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},o.paused=function(t){if(!arguments.length)return this._paused;var e,i,r=this._timeline;return t!=this._paused&&r&&(h||t||l.wake(),i=(e=r.rawTime())-this._pauseTime,!t&&r.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=r.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var A=y("core.SimpleTimeline",function(t){k.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});(o=A.prototype=new k).constructor=A,o.kill()._gc=!1,o._first=o._last=o._recent=null,o._sortChildren=!1,o.add=o.insert=function(t,e,i,r){var n,s;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=this.rawTime()-(t._timeline.rawTime()-t._pauseTime)),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),n=this._last,this._sortChildren)for(s=t._startTime;n&&n._startTime>s;)n=n._prev;return n?(t._next=n._next,n._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=n,this._recent=t,this._timeline&&this._uncache(!0),this},o._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},o.render=function(t,e,i){var r,n=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;n;)r=n._next,(n._active||t>=n._startTime&&!n._paused&&!n._gc)&&(n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=r},o.rawTime=function(){return h||l.wake(),this._totalTime};var E=y("TweenLite",function(e,i,r){if(k.call(this,i,r),this.render=E.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:E.selector(e)||e;var n,s,a,o=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?W[E.defaultOverwrite]:"number"==typeof l?l>>0:W[l],(o||e instanceof Array||e.push&&d(e))&&"number"!=typeof e[0])for(this._targets=a=f(e),this._propLookup=[],this._siblings=[],n=0;n<a.length;n++)(s=a[n])?"string"!=typeof s?s.length&&s!==t&&s[0]&&(s[0]===t||s[0].nodeType&&s[0].style&&!s.nodeType)?(a.splice(n--,1),this._targets=a=a.concat(f(s))):(this._siblings[n]=Z(s,this,!1),1===l&&this._siblings[n].length>1&&K(s,this,null,1,this._siblings[n])):"string"==typeof(s=a[n--]=E.selector(s))&&a.splice(n+1,1):a.splice(n--,1);else this._propLookup={},this._siblings=Z(e,this,!1),1===l&&this._siblings.length>1&&K(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&!1!==this.vars.immediateRender)&&(this._time=-1e-10,this.render(Math.min(0,-this._delay)))},!0),M=function(e){return e&&e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)};(o=E.prototype=new k).constructor=E,o.kill()._gc=!1,o.ratio=0,o._firstPT=o._targets=o._overwrittenProps=o._startAt=null,o._notifyPluginsOfEnabled=o._lazy=!1,E.version="2.0.2",E.defaultEase=o._ease=new b(null,null,1,1),E.defaultOverwrite="auto",E.ticker=l,E.autoSleep=120,E.lagSmoothing=function(t,e){l.lagSmoothing(t,e)},E.selector=t.$||t.jQuery||function(e){var i=t.$||t.jQuery;return i?(E.selector=i,i(e)):(r||(r=t.document),r?r.querySelectorAll?r.querySelectorAll(e):r.getElementById("#"===e.charAt(0)?e.substr(1):e):e)};var D=[],F={},z=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,N=/[\+-]=-?[\.\d]/,I=function(t){for(var e,i=this._firstPT;i;)e=i.blob?1===t&&null!=this.end?this.end:t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m.call(this._tween,e,this._target||i.t,this._tween):e<1e-6&&e>-1e-6&&!i.blob&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},L=function(t,e,i,r){var n,s,a,o,l,h,u,c=[],f=0,p="",d=0;for(c.start=t,c.end=e,t=c[0]=t+"",e=c[1]=e+"",i&&(i(c),t=c[0],e=c[1]),c.length=0,n=t.match(z)||[],s=e.match(z)||[],r&&(r._next=null,r.blob=1,c._firstPT=c._applyPT=r),l=s.length,o=0;o<l;o++)u=s[o],p+=(h=e.substr(f,e.indexOf(u,f)-f))||!o?h:",",f+=h.length,d?d=(d+1)%5:"rgba("===h.substr(-5)&&(d=1),u===n[o]||n.length<=o?p+=u:(p&&(c.push(p),p=""),a=parseFloat(n[o]),c.push(a),c._firstPT={_next:c._firstPT,t:c,p:c.length-1,s:a,c:("="===u.charAt(1)?parseInt(u.charAt(0)+"1",10)*parseFloat(u.substr(2)):parseFloat(u)-a)||0,f:0,m:d&&d<4?Math.round:0}),f+=u.length;return(p+=e.substr(f))&&c.push(p),c.setRatio=I,N.test(e)&&(c.end=null),c},B=function(t,e,i,r,n,s,a,o,l){"function"==typeof r&&(r=r(l||0,t));var h=typeof t[e],u="function"!==h?"":e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),c="get"!==i?i:u?a?t[u](a):t[u]():t[e],f="string"==typeof r&&"="===r.charAt(1),p={t:t,p:e,s:c,f:"function"===h,pg:0,n:n||e,m:s?"function"==typeof s?s:Math.round:0,pr:0,c:f?parseInt(r.charAt(0)+"1",10)*parseFloat(r.substr(2)):parseFloat(r)-c||0};if(("number"!=typeof c||"number"!=typeof r&&!f)&&(a||isNaN(c)||!f&&isNaN(r)||"boolean"==typeof c||"boolean"==typeof r?(p.fp=a,p={t:L(c,f?parseFloat(p.s)+p.c+(p.s+"").replace(/[0-9\-\.]/g,""):r,o||E.defaultStringFilter,p),p:"setRatio",s:0,c:1,f:2,pg:0,n:n||e,pr:0,m:0}):(p.s=parseFloat(c),f||(p.c=parseFloat(r)-p.s||0))),p.c)return(p._next=this._firstPT)&&(p._next._prev=p),this._firstPT=p,p},X=E._internals={isArray:d,isSelector:M,lazyTweens:D,blobDif:L},j=E._plugins={},$=X.tweenLookup={},V=0,Y=X.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1,yoyoEase:1},W={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},H=k._rootFramesTimeline=new A,U=k._rootTimeline=new A,q=30,G=X.lazyRender=function(){var t,e=D.length;for(F={};--e>-1;)(t=D[e])&&!1!==t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);D.length=0};U._startTime=l.time,H._startTime=l.frame,U._active=H._active=!0,setTimeout(G,1),k._updateRoot=E.render=function(){var t,e,i;if(D.length&&G(),U.render((l.time-U._startTime)*U._timeScale,!1,!1),H.render((l.frame-H._startTime)*H._timeScale,!1,!1),D.length&&G(),l.frame>=q){for(i in q=l.frame+(parseInt(E.autoSleep,10)||120),$){for(t=(e=$[i].tweens).length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete $[i]}if((!(i=U._first)||i._paused)&&E.autoSleep&&!H._first&&1===l._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||l.sleep()}}},l.addEventListener("tick",k._updateRoot);var Z=function(t,e,i){var r,n,s=t._gsTweenID;if($[s||(t._gsTweenID=s="t"+V++)]||($[s]={target:t,tweens:[]}),e&&((r=$[s].tweens)[n=r.length]=e,i))for(;--n>-1;)r[n]===e&&r.splice(n,1);return $[s].tweens},Q=function(t,e,i,r){var n,s,a=t.vars.onOverwrite;return a&&(n=a(t,e,i,r)),(a=E.onOverwrite)&&(s=a(t,e,i,r)),!1!==n&&!1!==s},K=function(t,e,i,r,n){var s,a,o,l;if(1===r||r>=4){for(l=n.length,s=0;s<l;s++)if((o=n[s])!==e)o._gc||o._kill(null,t,e)&&(a=!0);else if(5===r)break;return a}var h,u=e._startTime+1e-10,c=[],f=0,p=0===e._duration;for(s=n.length;--s>-1;)(o=n[s])===e||o._gc||o._paused||(o._timeline!==e._timeline?(h=h||J(e,0,p),0===J(o,h,p)&&(c[f++]=o)):o._startTime<=u&&o._startTime+o.totalDuration()/o._timeScale>u&&((p||!o._initted)&&u-o._startTime<=2e-10||(c[f++]=o)));for(s=f;--s>-1;)if(l=(o=c[s])._firstPT,2===r&&o._kill(i,t,e)&&(a=!0),2!==r||!o._firstPT&&o._initted&&l){if(2!==r&&!Q(o,e))continue;o._enabled(!1,!1)&&(a=!0)}return a},J=function(t,e,i){for(var r=t._timeline,n=r._timeScale,s=t._startTime;r._timeline;){if(s+=r._startTime,n*=r._timeScale,r._paused)return-100;r=r._timeline}return(s/=n)>e?s-e:i&&s===e||!t._initted&&s-e<2e-10?1e-10:(s+=t.totalDuration()/t._timeScale/n)>e+1e-10?0:s-e-1e-10};o._init=function(){var t,e,i,r,n,s,a=this.vars,o=this._overwrittenProps,l=this._duration,h=!!a.immediateRender,u=a.ease;if(a.startAt){for(r in this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),n={},a.startAt)n[r]=a.startAt[r];if(n.data="isStart",n.overwrite=!1,n.immediateRender=!0,n.lazy=h&&!1!==a.lazy,n.startAt=n.delay=null,n.onUpdate=a.onUpdate,n.onUpdateParams=a.onUpdateParams,n.onUpdateScope=a.onUpdateScope||a.callbackScope||this,this._startAt=E.to(this.target||{},0,n),h)if(this._time>0)this._startAt=null;else if(0!==l)return}else if(a.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{for(r in 0!==this._time&&(h=!1),i={},a)Y[r]&&"autoCSS"!==r||(i[r]=a[r]);if(i.overwrite=0,i.data="isFromStart",i.lazy=h&&!1!==a.lazy,i.immediateRender=h,this._startAt=E.to(this.target,0,i),h){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=u=u?u instanceof b?u:"function"==typeof u?new b(u,a.easeParams):x[u]||E.defaultEase:E.defaultEase,a.easeParams instanceof Array&&u.config&&(this._ease=u.config.apply(u,a.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(s=this._targets.length,t=0;t<s;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],o?o[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,o,0);if(e&&E._onPluginEvent("_onInitAllProps",this),o&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),a.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=a.onUpdate,this._initted=!0},o._initProps=function(e,i,r,n,s){var a,o,l,h,u,c;if(null==e)return!1;for(a in F[e._gsTweenID]&&G(),this.vars.css||e.style&&e!==t&&e.nodeType&&j.css&&!1!==this.vars.autoCSS&&function(t,e){var i,r={};for(i in t)Y[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!j[i]||j[i]&&j[i]._autoCSS)||(r[i]=t[i],delete t[i]);t.css=r}(this.vars,e),this.vars)if(c=this.vars[a],Y[a])c&&(c instanceof Array||c.push&&d(c))&&-1!==c.join("").indexOf("{self}")&&(this.vars[a]=c=this._swapSelfInParams(c,this));else if(j[a]&&(h=new j[a])._onInitTween(e,this.vars[a],this,s)){for(this._firstPT=u={_next:this._firstPT,t:h,p:"setRatio",s:0,c:1,f:1,n:a,pg:1,pr:h._priority,m:0},o=h._overwriteProps.length;--o>-1;)i[h._overwriteProps[o]]=this._firstPT;(h._priority||h._onInitAllProps)&&(l=!0),(h._onDisable||h._onEnable)&&(this._notifyPluginsOfEnabled=!0),u._next&&(u._next._prev=u)}else i[a]=B.call(this,e,a,"get",c,a,0,null,this.vars.stringFilter,s);return n&&this._kill(n,e)?this._initProps(e,i,r,n,s):this._overwrite>1&&this._firstPT&&r.length>1&&K(e,this,i,this._overwrite,r)?(this._kill(i,e),this._initProps(e,i,r,n,s)):(this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration)&&(F[e._gsTweenID]=!0),l)},o.render=function(t,e,i){var r,n,s,a,o=this._time,l=this._duration,h=this._rawPrevTime;if(t>=l-1e-7&&t>=0)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(r=!0,n="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(h<0||t<=0&&t>=-1e-7||1e-10===h&&"isPause"!==this.data)&&h!==t&&(i=!0,h>1e-10&&(n="onReverseComplete")),this._rawPrevTime=a=!e||t||h===t?t:1e-10);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==o||0===l&&h>0)&&(n="onReverseComplete",r=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(h>=0&&(1e-10!==h||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=a=!e||t||h===t?t:1e-10)),(!this._initted||this._startAt&&this._startAt.progress())&&(i=!0);else if(this._totalTime=this._time=t,this._easeType){var u=t/l,c=this._easeType,f=this._easePower;(1===c||3===c&&u>=.5)&&(u=1-u),3===c&&(u*=2),1===f?u*=u:2===f?u*=u*u:3===f?u*=u*u*u:4===f&&(u*=u*u*u*u),this.ratio=1===c?1-u:2===c?u:t/l<.5?u/2:1-u/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==o||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=o,this._rawPrevTime=h,D.push(this),void(this._lazy=[t,e]);this._time&&!r?this.ratio=this._ease.getRatio(this._time/l):r&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==o&&t>=0&&(this._active=!0),0===o&&(this._startAt&&(t>=0?this._startAt.render(t,!0,i):n||(n="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),s=this._firstPT;s;)s.f?s.t[s.p](s.c*this.ratio+s.s):s.t[s.p]=s.c*this.ratio+s.s,s=s._next;this._onUpdate&&(t<0&&this._startAt&&-1e-4!==t&&this._startAt.render(t,!0,i),e||(this._time!==o||r||i)&&this._callback("onUpdate")),n&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&-1e-4!==t&&this._startAt.render(t,!0,i),r&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[n]&&this._callback(n),0===l&&1e-10===this._rawPrevTime&&1e-10!==a&&(this._rawPrevTime=0)))}},o._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:E.selector(e)||e;var r,n,s,a,o,l,h,u,c,f=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline,p=this._firstPT;if((d(e)||M(e))&&"number"!=typeof e[0])for(r=e.length;--r>-1;)this._kill(t,e[r],i)&&(l=!0);else{if(this._targets){for(r=this._targets.length;--r>-1;)if(e===this._targets[r]){o=this._propLookup[r]||{},this._overwrittenProps=this._overwrittenProps||[],n=this._overwrittenProps[r]=t?this._overwrittenProps[r]||{}:"all";break}}else{if(e!==this.target)return!1;o=this._propLookup,n=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(o){if(h=t||o,u=t!==n&&"all"!==n&&t!==o&&("object"!=typeof t||!t._tempKill),i&&(E.onOverwrite||this.vars.onOverwrite)){for(s in h)o[s]&&(c||(c=[]),c.push(s));if((c||!t)&&!Q(this,i,e,c))return!1}for(s in h)(a=o[s])&&(f&&(a.f?a.t[a.p](a.s):a.t[a.p]=a.s,l=!0),a.pg&&a.t._kill(h)&&(l=!0),a.pg&&0!==a.t._overwriteProps.length||(a._prev?a._prev._next=a._next:a===this._firstPT&&(this._firstPT=a._next),a._next&&(a._next._prev=a._prev),a._next=a._prev=null),delete o[s]),u&&(n[s]=1);!this._firstPT&&this._initted&&p&&this._enabled(!1,!1)}}return l},o.invalidate=function(){return this._notifyPluginsOfEnabled&&E._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],k.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-1e-10,this.render(Math.min(0,-this._delay))),this},o._enabled=function(t,e){if(h||l.wake(),t&&this._gc){var i,r=this._targets;if(r)for(i=r.length;--i>-1;)this._siblings[i]=Z(r[i],this,!0);else this._siblings=Z(this.target,this,!0)}return k.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&E._onPluginEvent(t?"_onEnable":"_onDisable",this)},E.to=function(t,e,i){return new E(t,e,i)},E.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new E(t,e,i)},E.fromTo=function(t,e,i,r){return r.startAt=i,r.immediateRender=0!=r.immediateRender&&0!=i.immediateRender,new E(t,e,r)},E.delayedCall=function(t,e,i,r,n){return new E(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:r,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:n,overwrite:0})},E.set=function(t,e){return new E(t,0,e)},E.getTweensOf=function(t,e){if(null==t)return[];var i,r,n,s;if(t="string"!=typeof t?t:E.selector(t)||t,(d(t)||M(t))&&"number"!=typeof t[0]){for(i=t.length,r=[];--i>-1;)r=r.concat(E.getTweensOf(t[i],e));for(i=r.length;--i>-1;)for(s=r[i],n=i;--n>-1;)s===r[n]&&r.splice(i,1)}else if(t._gsTweenID)for(i=(r=Z(t).concat()).length;--i>-1;)(r[i]._gc||e&&!r[i].isActive())&&r.splice(i,1);return r||[]},E.killTweensOf=E.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var r=E.getTweensOf(t,e),n=r.length;--n>-1;)r[n]._kill(i,t)};var tt=y("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=tt.prototype},!0);if(o=tt.prototype,tt.version="1.19.0",tt.API=2,o._firstPT=null,o._addTween=B,o.setRatio=I,o._kill=function(t){var e,i=this._overwriteProps,r=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;r;)null!=t[r.n]&&(r._next&&(r._next._prev=r._prev),r._prev?(r._prev._next=r._next,r._prev=null):this._firstPT===r&&(this._firstPT=r._next)),r=r._next;return!1},o._mod=o._roundProps=function(t){for(var e,i=this._firstPT;i;)(e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")])&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},E._onPluginEvent=function(t,e){var i,r,n,s,a,o=e._firstPT;if("_onInitAllProps"===t){for(;o;){for(a=o._next,r=n;r&&r.pr>o.pr;)r=r._next;(o._prev=r?r._prev:s)?o._prev._next=o:n=o,(o._next=r)?r._prev=o:s=o,o=a}o=e._firstPT=n}for(;o;)o.pg&&"function"==typeof o.t[t]&&o.t[t]()&&(i=!0),o=o._next;return i},tt.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===tt.API&&(j[(new t[e])._propName]=t[e]);return!0},g.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,r=t.priority||0,n=t.overwriteProps,s={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},a=y("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){tt.call(this,i,r),this._overwriteProps=n||[]},!0===t.global),o=a.prototype=new tt(i);for(e in o.constructor=a,a.API=t.API,s)"function"==typeof t[e]&&(o[s[e]]=t[e]);return a.version=t.version,tt.activate([a]),a},s=t._gsQueue){for(a=0;a<s.length;a++)s[a]();for(o in _)_[o].func||t.console.log("GSAP encountered missing dependency: "+o)}return h=!1,E}(n),a=n.GreenSockGlobals,o=a.com.greensock,l=o.core.SimpleTimeline,h=o.core.Animation,u=a.Ease,c=a.Linear,f=(a.Power1,a.Power2),p=(a.Power3,a.Power4,a.TweenPlugin);o.events.EventDispatcher}).call(this,i(35)(t),i(36))},function(t,e,i){"use strict";i.d(e,"c",function(){return n}),i.d(e,"a",function(){return s}),i.d(e,"b",function(){return a});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)};function n(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}var s=function(){return(s=Object.assign||function(t){for(var e,i=1,r=arguments.length;i<r;i++)for(var n in e=arguments[i])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}).apply(this,arguments)};function a(t,e,i,r){var n,s=arguments.length,a=s<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,i):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,i,r);else for(var o=t.length-1;o>=0;o--)(n=t[o])&&(a=(s<3?n(a):s>3?n(e,i,a):n(e,i))||a);return s>3&&a&&Object.defineProperty(e,i,a),a}},function(t,e,i){"use strict";var r=i(0);
/*!
 * VERSION: 2.0.2
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */r.g._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(){var t=function(t){r.e.call(this,t),this._labels={},this.autoRemoveChildren=!0===this.vars.autoRemoveChildren,this.smoothChildTiming=!0===this.vars.smoothChildTiming,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var e,i,n=this.vars;for(i in n)e=n[i],s(e)&&-1!==e.join("").indexOf("{self}")&&(n[i]=this._swapSelfInParams(e));s(n.tweens)&&this.add(n.tweens,0,n.align,n.stagger)},e=r.h._internals,i=t._internals={},n=e.isSelector,s=e.isArray,a=e.lazyTweens,o=e.lazyRender,l=r.g._gsDefine.globals,h=function(t){var e,i={};for(e in t)i[e]=t[e];return i},u=function(t,e,i){var r,n,s=t.cycle;for(r in s)n=s[r],t[r]="function"==typeof n?n(i,e[i]):n[i%n.length];delete t.cycle},c=i.pauseCallback=function(){},f=function(t){var e,i=[],r=t.length;for(e=0;e!==r;i.push(t[e++]));return i},p=t.prototype=new r.e;return t.version="2.0.2",p.constructor=t,p.kill()._gc=p._forcingPlayhead=p._hasPause=!1,p.to=function(t,e,i,n){var s=i.repeat&&l.TweenMax||r.h;return e?this.add(new s(t,e,i),n):this.set(t,i,n)},p.from=function(t,e,i,n){return this.add((i.repeat&&l.TweenMax||r.h).from(t,e,i),n)},p.fromTo=function(t,e,i,n,s){var a=n.repeat&&l.TweenMax||r.h;return e?this.add(a.fromTo(t,e,i,n),s):this.set(t,n,s)},p.staggerTo=function(e,i,s,a,o,l,c,p){var d,_,m=new t({onComplete:l,onCompleteParams:c,callbackScope:p,smoothChildTiming:this.smoothChildTiming}),g=s.cycle;for("string"==typeof e&&(e=r.h.selector(e)||e),n(e=e||[])&&(e=f(e)),(a=a||0)<0&&((e=f(e)).reverse(),a*=-1),_=0;_<e.length;_++)(d=h(s)).startAt&&(d.startAt=h(d.startAt),d.startAt.cycle&&u(d.startAt,e,_)),g&&(u(d,e,_),null!=d.duration&&(i=d.duration,delete d.duration)),m.to(e[_],i,d,_*a);return this.add(m,o)},p.staggerFrom=function(t,e,i,r,n,s,a,o){return i.immediateRender=0!=i.immediateRender,i.runBackwards=!0,this.staggerTo(t,e,i,r,n,s,a,o)},p.staggerFromTo=function(t,e,i,r,n,s,a,o,l){return r.startAt=i,r.immediateRender=0!=r.immediateRender&&0!=i.immediateRender,this.staggerTo(t,e,r,n,s,a,o,l)},p.call=function(t,e,i,n){return this.add(r.h.delayedCall(0,t,e,i),n)},p.set=function(t,e,i){return i=this._parseTimeOrLabel(i,0,!0),null==e.immediateRender&&(e.immediateRender=i===this._time&&!this._paused),this.add(new r.h(t,0,e),i)},t.exportRoot=function(e,i){null==(e=e||{}).smoothChildTiming&&(e.smoothChildTiming=!0);var n,s,a,o,l=new t(e),h=l._timeline;for(null==i&&(i=!0),h._remove(l,!0),l._startTime=0,l._rawPrevTime=l._time=l._totalTime=h._time,a=h._first;a;)o=a._next,i&&a instanceof r.h&&a.target===a.vars.onComplete||((s=a._startTime-a._delay)<0&&(n=1),l.add(a,s)),a=o;return h.add(l,0),n&&l.totalDuration(),l},p.add=function(e,i,n,a){var o,l,h,u,c,f;if("number"!=typeof i&&(i=this._parseTimeOrLabel(i,0,!0,e)),!(e instanceof r.a)){if(e instanceof Array||e&&e.push&&s(e)){for(n=n||"normal",a=a||0,o=i,l=e.length,h=0;h<l;h++)s(u=e[h])&&(u=new t({tweens:u})),this.add(u,o),"string"!=typeof u&&"function"!=typeof u&&("sequence"===n?o=u._startTime+u.totalDuration()/u._timeScale:"start"===n&&(u._startTime-=u.delay())),o+=a;return this._uncache(!0)}if("string"==typeof e)return this.addLabel(e,i);if("function"!=typeof e)throw"Cannot add "+e+" into the timeline; it is not a tween, timeline, function, or string.";e=r.h.delayedCall(0,e)}if(r.e.prototype.add.call(this,e,i),e._time&&(o=Math.max(0,Math.min(e.totalDuration(),(this.rawTime()-e._startTime)*e._timeScale)),Math.abs(o-e._totalTime)>1e-5&&e.render(o,!1,!1)),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(f=(c=this).rawTime()>e._startTime;c._timeline;)f&&c._timeline.smoothChildTiming?c.totalTime(c._totalTime,!0):c._gc&&c._enabled(!0,!1),c=c._timeline;return this},p.remove=function(t){if(t instanceof r.a){this._remove(t,!1);var e=t._timeline=t.vars.useFrames?r.a._rootFramesTimeline:r.a._rootTimeline;return t._startTime=(t._paused?t._pauseTime:e._time)-(t._reversed?t.totalDuration()-t._totalTime:t._totalTime)/t._timeScale,this}if(t instanceof Array||t&&t.push&&s(t)){for(var i=t.length;--i>-1;)this.remove(t[i]);return this}return"string"==typeof t?this.removeLabel(t):this.kill(null,t)},p._remove=function(t,e){return r.e.prototype._remove.call(this,t,e),this._last?this._time>this.duration()&&(this._time=this._duration,this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},p.append=function(t,e){return this.add(t,this._parseTimeOrLabel(null,e,!0,t))},p.insert=p.insertMultiple=function(t,e,i,r){return this.add(t,e||0,i,r)},p.appendMultiple=function(t,e,i,r){return this.add(t,this._parseTimeOrLabel(null,e,!0,t),i,r)},p.addLabel=function(t,e){return this._labels[t]=this._parseTimeOrLabel(e),this},p.addPause=function(t,e,i,n){var s=r.h.delayedCall(0,c,i,n||this);return s.vars.onComplete=s.vars.onReverseComplete=e,s.data="isPause",this._hasPause=!0,this.add(s,t)},p.removeLabel=function(t){return delete this._labels[t],this},p.getLabelTime=function(t){return null!=this._labels[t]?this._labels[t]:-1},p._parseTimeOrLabel=function(t,e,i,n){var a,o;if(n instanceof r.a&&n.timeline===this)this.remove(n);else if(n&&(n instanceof Array||n.push&&s(n)))for(o=n.length;--o>-1;)n[o]instanceof r.a&&n[o].timeline===this&&this.remove(n[o]);if(a="number"!=typeof t||e?this.duration()>99999999999?this.recent().endTime(!1):this._duration:0,"string"==typeof e)return this._parseTimeOrLabel(e,i&&"number"==typeof t&&null==this._labels[e]?t-a:0,i);if(e=e||0,"string"!=typeof t||!isNaN(t)&&null==this._labels[t])null==t&&(t=a);else{if(-1===(o=t.indexOf("=")))return null==this._labels[t]?i?this._labels[t]=a+e:e:this._labels[t]+e;e=parseInt(t.charAt(o-1)+"1",10)*Number(t.substr(o+1)),t=o>1?this._parseTimeOrLabel(t.substr(0,o-1),0,i):a}return Number(t)+e},p.seek=function(t,e){return this.totalTime("number"==typeof t?t:this._parseTimeOrLabel(t),!1!==e)},p.stop=function(){return this.paused(!0)},p.gotoAndPlay=function(t,e){return this.play(t,e)},p.gotoAndStop=function(t,e){return this.pause(t,e)},p.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var r,n,s,l,h,u,c,f=this._time,p=this._dirty?this.totalDuration():this._totalDuration,d=this._startTime,_=this._timeScale,m=this._paused;if(f!==this._time&&(t+=this._time-f),t>=p-1e-7&&t>=0)this._totalTime=this._time=p,this._reversed||this._hasPausedChild()||(n=!0,l="onComplete",h=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||this._rawPrevTime<0||1e-10===this._rawPrevTime)&&this._rawPrevTime!==t&&this._first&&(h=!0,this._rawPrevTime>1e-10&&(l="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-10,t=p+1e-4;else if(t<1e-7)if(this._totalTime=this._time=0,(0!==f||0===this._duration&&1e-10!==this._rawPrevTime&&(this._rawPrevTime>0||t<0&&this._rawPrevTime>=0))&&(l="onReverseComplete",n=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(h=n=!0,l="onReverseComplete"):this._rawPrevTime>=0&&this._first&&(h=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-10,0===t&&n)for(r=this._first;r&&0===r._startTime;)r._duration||(n=!1),r=r._next;t=0,this._initted||(h=!0)}else{if(this._hasPause&&!this._forcingPlayhead&&!e){if(t>=f)for(r=this._first;r&&r._startTime<=t&&!u;)r._duration||"isPause"!==r.data||r.ratio||0===r._startTime&&0===this._rawPrevTime||(u=r),r=r._next;else for(r=this._last;r&&r._startTime>=t&&!u;)r._duration||"isPause"===r.data&&r._rawPrevTime>0&&(u=r),r=r._prev;u&&(this._time=t=u._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}this._totalTime=this._time=this._rawPrevTime=t}if(this._time!==f&&this._first||i||h||u){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==f&&t>0&&(this._active=!0),0===f&&this.vars.onStart&&(0===this._time&&this._duration||e||this._callback("onStart")),(c=this._time)>=f)for(r=this._first;r&&(s=r._next,c===this._time&&(!this._paused||m));)(r._active||r._startTime<=c&&!r._paused&&!r._gc)&&(u===r&&this.pause(),r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=s;else for(r=this._last;r&&(s=r._prev,c===this._time&&(!this._paused||m));){if(r._active||r._startTime<=f&&!r._paused&&!r._gc){if(u===r){for(u=r._prev;u&&u.endTime()>this._time;)u.render(u._reversed?u.totalDuration()-(t-u._startTime)*u._timeScale:(t-u._startTime)*u._timeScale,e,i),u=u._prev;u=null,this.pause()}r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)}r=s}this._onUpdate&&(e||(a.length&&o(),this._callback("onUpdate"))),l&&(this._gc||d!==this._startTime&&_===this._timeScale||(0===this._time||p>=this.totalDuration())&&(n&&(a.length&&o(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[l]&&this._callback(l)))}},p._hasPausedChild=function(){for(var e=this._first;e;){if(e._paused||e instanceof t&&e._hasPausedChild())return!0;e=e._next}return!1},p.getChildren=function(t,e,i,n){n=n||-9999999999;for(var s=[],a=this._first,o=0;a;)a._startTime<n||(a instanceof r.h?!1!==e&&(s[o++]=a):(!1!==i&&(s[o++]=a),!1!==t&&(o=(s=s.concat(a.getChildren(!0,e,i))).length))),a=a._next;return s},p.getTweensOf=function(t,e){var i,n,s=this._gc,a=[],o=0;for(s&&this._enabled(!0,!0),n=(i=r.h.getTweensOf(t)).length;--n>-1;)(i[n].timeline===this||e&&this._contains(i[n]))&&(a[o++]=i[n]);return s&&this._enabled(!1,!0),a},p.recent=function(){return this._recent},p._contains=function(t){for(var e=t.timeline;e;){if(e===this)return!0;e=e.timeline}return!1},p.shiftChildren=function(t,e,i){i=i||0;for(var r,n=this._first,s=this._labels;n;)n._startTime>=i&&(n._startTime+=t),n=n._next;if(e)for(r in s)s[r]>=i&&(s[r]+=t);return this._uncache(!0)},p._kill=function(t,e){if(!t&&!e)return this._enabled(!1,!1);for(var i=e?this.getTweensOf(e):this.getChildren(!0,!0,!1),r=i.length,n=!1;--r>-1;)i[r]._kill(t,e)&&(n=!0);return n},p.clear=function(t){var e=this.getChildren(!1,!0,!0),i=e.length;for(this._time=this._totalTime=0;--i>-1;)e[i]._enabled(!1,!1);return!1!==t&&(this._labels={}),this._uncache(!0)},p.invalidate=function(){for(var t=this._first;t;)t.invalidate(),t=t._next;return r.a.prototype.invalidate.call(this)},p._enabled=function(t,e){if(t===this._gc)for(var i=this._first;i;)i._enabled(t,!0),i=i._next;return r.e.prototype._enabled.call(this,t,e)},p.totalTime=function(t,e,i){this._forcingPlayhead=!0;var n=r.a.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,n},p.duration=function(t){return arguments.length?(0!==this.duration()&&0!==t&&this.timeScale(this._duration/t),this):(this._dirty&&this.totalDuration(),this._duration)},p.totalDuration=function(t){if(!arguments.length){if(this._dirty){for(var e,i,r=0,n=this._last,s=999999999999;n;)e=n._prev,n._dirty&&n.totalDuration(),n._startTime>s&&this._sortChildren&&!n._paused&&!this._calculatingDuration?(this._calculatingDuration=1,this.add(n,n._startTime-n._delay),this._calculatingDuration=0):s=n._startTime,n._startTime<0&&!n._paused&&(r-=n._startTime,this._timeline.smoothChildTiming&&(this._startTime+=n._startTime/this._timeScale,this._time-=n._startTime,this._totalTime-=n._startTime,this._rawPrevTime-=n._startTime),this.shiftChildren(-n._startTime,!1,-9999999999),s=0),(i=n._startTime+n._totalDuration/n._timeScale)>r&&(r=i),n=e;this._duration=this._totalDuration=r,this._dirty=!1}return this._totalDuration}return t&&this.totalDuration()?this.timeScale(this._totalDuration/t):this},p.paused=function(t){if(!t)for(var e=this._first,i=this._time;e;)e._startTime===i&&"isPause"===e.data&&(e._rawPrevTime=0),e=e._next;return r.a.prototype.paused.apply(this,arguments)},p.usesFrames=function(){for(var t=this._timeline;t._timeline;)t=t._timeline;return t===r.a._rootFramesTimeline},p.rawTime=function(t){return t&&(this._paused||this._repeat&&this.time()>0&&this.totalProgress()<1)?this._totalTime%(this._duration+this._repeatDelay):this._paused?this._totalTime:(this._timeline.rawTime(t)-this._startTime)*this._timeScale},t},!0);var n=r.i.TimelineLite;
/*!
 * VERSION: 2.0.2
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/r.g._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],function(){var t=function(t){var e,i=[],r=t.length;for(e=0;e!==r;i.push(t[e++]));return i},e=function(t,e,i){var r,n,s=t.cycle;for(r in s)n=s[r],t[r]="function"==typeof n?n(i,e[i]):n[i%n.length];delete t.cycle},i=function(t,e,n){r.h.call(this,t,e,n),this._cycle=0,this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._repeat&&this._uncache(!0),this.render=i.prototype.render},n=r.h._internals,s=n.isSelector,a=n.isArray,o=i.prototype=r.h.to({},.1,{}),l=[];i.version="2.0.2",o.constructor=i,o.kill()._gc=!1,i.killTweensOf=i.killDelayedCallsTo=r.h.killTweensOf,i.getTweensOf=r.h.getTweensOf,i.lagSmoothing=r.h.lagSmoothing,i.ticker=r.h.ticker,i.render=r.h.render,o.invalidate=function(){return this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._yoyoEase=null,this._uncache(!0),r.h.prototype.invalidate.call(this)},o.updateTo=function(t,e){var i,n=this.ratio,s=this.vars.immediateRender||t.immediateRender;for(i in e&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay)),t)this.vars[i]=t[i];if(this._initted||s)if(e)this._initted=!1,s&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&r.h._onPluginEvent("_onDisable",this),this._time/this._duration>.998){var a=this._totalTime;this.render(0,!0,!1),this._initted=!1,this.render(a,!0,!1)}else if(this._initted=!1,this._init(),this._time>0||s)for(var o,l=1/(1-n),h=this._firstPT;h;)o=h.s+h.c,h.c*=l,h.s=o-h.c,h=h._next;return this},o.render=function(t,e,i){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var s,a,o,l,h,u,c,f,p,d=this._dirty?this.totalDuration():this._totalDuration,_=this._time,m=this._totalTime,g=this._cycle,y=this._duration,v=this._rawPrevTime;if(t>=d-1e-7&&t>=0?(this._totalTime=d,this._cycle=this._repeat,this._yoyo&&0!=(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=y,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(s=!0,a="onComplete",i=i||this._timeline.autoRemoveChildren),0===y&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(v<0||t<=0&&t>=-1e-7||1e-10===v&&"isPause"!==this.data)&&v!==t&&(i=!0,v>1e-10&&(a="onReverseComplete")),this._rawPrevTime=f=!e||t||v===t?t:1e-10)):t<1e-7?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==m||0===y&&v>0)&&(a="onReverseComplete",s=this._reversed),t<0&&(this._active=!1,0===y&&(this._initted||!this.vars.lazy||i)&&(v>=0&&(i=!0),this._rawPrevTime=f=!e||t||v===t?t:1e-10)),this._initted||(i=!0)):(this._totalTime=this._time=t,0!==this._repeat&&(l=y+this._repeatDelay,this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&m<=t&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!=(1&this._cycle)&&(this._time=y-this._time,(p=this._yoyoEase||this.vars.yoyoEase)&&(this._yoyoEase||(!0!==p||this._initted?this._yoyoEase=p=!0===p?this._ease:p instanceof r.b?p:r.b.map[p]:(p=this.vars.ease,this._yoyoEase=p=p?p instanceof r.b?p:"function"==typeof p?new r.b(p,this.vars.easeParams):r.b.map[p]||r.h.defaultEase:r.h.defaultEase)),this.ratio=p?1-p.getRatio((y-this._time)/y):0)),this._time>y?this._time=y:this._time<0&&(this._time=0)),this._easeType&&!p?(h=this._time/y,u=this._easeType,c=this._easePower,(1===u||3===u&&h>=.5)&&(h=1-h),3===u&&(h*=2),1===c?h*=h:2===c?h*=h*h:3===c?h*=h*h*h:4===c&&(h*=h*h*h*h),1===u?this.ratio=1-h:2===u?this.ratio=h:this._time/y<.5?this.ratio=h/2:this.ratio=1-h/2):p||(this.ratio=this._ease.getRatio(this._time/y))),_!==this._time||i||g!==this._cycle){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=_,this._totalTime=m,this._rawPrevTime=v,this._cycle=g,n.lazyTweens.push(this),void(this._lazy=[t,e]);!this._time||s||p?s&&this._ease._calcEnd&&!p&&(this.ratio=this._ease.getRatio(0===this._time?0:1)):this.ratio=this._ease.getRatio(this._time/y)}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==_&&t>=0&&(this._active=!0),0===m&&(2===this._initted&&t>0&&this._init(),this._startAt&&(t>=0?this._startAt.render(t,!0,i):a||(a="_dummyGS")),this.vars.onStart&&(0===this._totalTime&&0!==y||e||this._callback("onStart"))),o=this._firstPT;o;)o.f?o.t[o.p](o.c*this.ratio+o.s):o.t[o.p]=o.c*this.ratio+o.s,o=o._next;this._onUpdate&&(t<0&&this._startAt&&this._startTime&&this._startAt.render(t,!0,i),e||(this._totalTime!==m||a)&&this._callback("onUpdate")),this._cycle!==g&&(e||this._gc||this.vars.onRepeat&&this._callback("onRepeat")),a&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(t,!0,i),s&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[a]&&this._callback(a),0===y&&1e-10===this._rawPrevTime&&1e-10!==f&&(this._rawPrevTime=0)))}else m!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},i.to=function(t,e,r){return new i(t,e,r)},i.from=function(t,e,r){return r.runBackwards=!0,r.immediateRender=0!=r.immediateRender,new i(t,e,r)},i.fromTo=function(t,e,r,n){return n.startAt=r,n.immediateRender=0!=n.immediateRender&&0!=r.immediateRender,new i(t,e,n)},i.staggerTo=i.allTo=function(n,o,h,u,c,f,p){u=u||0;var d,_,m,g,y=0,v=[],b=function(){h.onComplete&&h.onComplete.apply(h.onCompleteScope||this,arguments),c.apply(p||h.callbackScope||this,f||l)},x=h.cycle,T=h.startAt&&h.startAt.cycle;for(a(n)||("string"==typeof n&&(n=r.h.selector(n)||n),s(n)&&(n=t(n))),n=n||[],u<0&&((n=t(n)).reverse(),u*=-1),d=n.length-1,m=0;m<=d;m++){for(g in _={},h)_[g]=h[g];if(x&&(e(_,n,m),null!=_.duration&&(o=_.duration,delete _.duration)),T){for(g in T=_.startAt={},h.startAt)T[g]=h.startAt[g];e(_.startAt,n,m)}_.delay=y+(_.delay||0),m===d&&c&&(_.onComplete=b),v[m]=new i(n[m],o,_),y+=u}return v},i.staggerFrom=i.allFrom=function(t,e,r,n,s,a,o){return r.runBackwards=!0,r.immediateRender=0!=r.immediateRender,i.staggerTo(t,e,r,n,s,a,o)},i.staggerFromTo=i.allFromTo=function(t,e,r,n,s,a,o,l){return n.startAt=r,n.immediateRender=0!=n.immediateRender&&0!=r.immediateRender,i.staggerTo(t,e,n,s,a,o,l)},i.delayedCall=function(t,e,r,n,s){return new i(e,0,{delay:t,onComplete:e,onCompleteParams:r,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:r,immediateRender:!1,useFrames:s,overwrite:0})},i.set=function(t,e){return new i(t,0,e)},i.isTweening=function(t){return r.h.getTweensOf(t,!0).length>0};var h=function(t,e){for(var i=[],n=0,s=t._first;s;)s instanceof r.h?i[n++]=s:(e&&(i[n++]=s),n=(i=i.concat(h(s,e))).length),s=s._next;return i},u=i.getAllTweens=function(t){return h(r.a._rootTimeline,t).concat(h(r.a._rootFramesTimeline,t))};i.killAll=function(t,e,i,n){null==e&&(e=!0),null==i&&(i=!0);var s,a,o,l=u(0!=n),h=l.length,c=e&&i&&n;for(o=0;o<h;o++)a=l[o],(c||a instanceof r.e||(s=a.target===a.vars.onComplete)&&i||e&&!s)&&(t?a.totalTime(a._reversed?0:a.totalDuration()):a._enabled(!1,!1))},i.killChildTweensOf=function(e,o){if(null!=e){var l,h,u,c,f,p=n.tweenLookup;if("string"==typeof e&&(e=r.h.selector(e)||e),s(e)&&(e=t(e)),a(e))for(c=e.length;--c>-1;)i.killChildTweensOf(e[c],o);else{for(u in l=[],p)for(h=p[u].target.parentNode;h;)h===e&&(l=l.concat(p[u].tweens)),h=h.parentNode;for(f=l.length,c=0;c<f;c++)o&&l[c].totalTime(l[c].totalDuration()),l[c]._enabled(!1,!1)}}};var c=function(t,e,i,n){e=!1!==e,i=!1!==i;for(var s,a,o=u(n=!1!==n),l=e&&i&&n,h=o.length;--h>-1;)a=o[h],(l||a instanceof r.e||(s=a.target===a.vars.onComplete)&&i||e&&!s)&&a.paused(t)};return i.pauseAll=function(t,e,i){c(!0,t,e,i)},i.resumeAll=function(t,e,i){c(!1,t,e,i)},i.globalTimeScale=function(t){var e=r.a._rootTimeline,i=r.h.ticker.time;return arguments.length?(t=t||1e-10,e._startTime=i-(i-e._startTime)*e._timeScale/t,e=r.a._rootFramesTimeline,i=r.h.ticker.frame,e._startTime=i-(i-e._startTime)*e._timeScale/t,e._timeScale=r.a._rootTimeline._timeScale=t,t):e._timeScale},o.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},o.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},o.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!=(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},o.duration=function(t){return arguments.length?r.a.prototype.duration.call(this,t):this._duration},o.totalDuration=function(t){return arguments.length?-1===this._repeat?this:this.duration((t-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},o.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},o.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},o.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},i},!0);var s=r.i.TweenMax;
/*!
 * VERSION: 2.0.2
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */
r.g._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(){var t,e,i,n,s=function(){r.f.call(this,"css"),this._overwriteProps.length=0,this.setRatio=s.prototype.setRatio},a=r.g._gsDefine.globals,o={},l=s.prototype=new r.f("css");l.constructor=s,s.version="2.0.2",s.API=2,s.defaultTransformPerspective=0,s.defaultSkewType="compensated",s.defaultSmoothOrigin=!0,l="px",s.suffixMap={top:l,right:l,bottom:l,left:l,width:l,height:l,fontSize:l,padding:l,margin:l,perspective:l,lineHeight:""};var h,u,c,f,p,d,_,m,g=/(?:\-|\.|\b)(\d|\.|e\-)+/g,y=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,v=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,b=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,x=/(?:\d|\-|\+|=|#|\.)*/g,T=/opacity *= *([^)]*)/i,w=/opacity:([^;]*)/i,P=/alpha\(opacity *=.+?\)/i,S=/^(rgb|hsl)/,C=/([A-Z])/g,O=/-([a-z])/gi,k=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,R=function(t,e){return e.toUpperCase()},A=/(?:Left|Right|Width)/i,E=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,M=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,D=/,(?=[^\)]*(?:\(|$))/gi,F=/[\s,\(]/i,z=Math.PI/180,N=180/Math.PI,I={},L={style:{}},B=r.g.document||{createElement:function(){return L}},X=function(t,e){return B.createElementNS?B.createElementNS(e||"http://www.w3.org/1999/xhtml",t):B.createElement(t)},j=X("div"),$=X("img"),V=s._internals={_specialProps:o},Y=(r.g.navigator||{}).userAgent||"",W=function(){var t=Y.indexOf("Android"),e=X("a");return c=-1!==Y.indexOf("Safari")&&-1===Y.indexOf("Chrome")&&(-1===t||parseFloat(Y.substr(t+8,2))>3),p=c&&parseFloat(Y.substr(Y.indexOf("Version/")+8,2))<6,f=-1!==Y.indexOf("Firefox"),(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(Y)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(Y))&&(d=parseFloat(RegExp.$1)),!!e&&(e.style.cssText="top:1px;opacity:.55;",/^0.55/.test(e.style.opacity))}(),H=function(t){return T.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},U=function(t){r.g.console&&console.log(t)},q="",G="",Z=function(t,e){var i,r,n=(e=e||j).style;if(void 0!==n[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],r=5;--r>-1&&void 0===n[i[r]+t];);return r>=0?(q="-"+(G=3===r?"ms":i[r]).toLowerCase()+"-",G+t):null},Q=("undefined"!=typeof window?window:B.defaultView||{getComputedStyle:function(){}}).getComputedStyle,K=s.getStyle=function(t,e,i,r,n){var s;return W||"opacity"!==e?(!r&&t.style[e]?s=t.style[e]:(i=i||Q(t))?s=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(C,"-$1").toLowerCase()):t.currentStyle&&(s=t.currentStyle[e]),null==n||s&&"none"!==s&&"auto"!==s&&"auto auto"!==s?s:n):H(t)},J=V.convertToPixels=function(t,e,i,n,a){if("px"===n||!n&&"lineHeight"!==e)return i;if("auto"===n||!i)return 0;var o,l,h,u=A.test(e),c=t,f=j.style,p=i<0,d=1===i;if(p&&(i=-i),d&&(i*=100),"lineHeight"!==e||n)if("%"===n&&-1!==e.indexOf("border"))o=i/100*(u?t.clientWidth:t.clientHeight);else{if(f.cssText="border:0 solid red;position:"+K(t,"position")+";line-height:0;","%"!==n&&c.appendChild&&"v"!==n.charAt(0)&&"rem"!==n)f[u?"borderLeftWidth":"borderTopWidth"]=i+n;else{if(c=t.parentNode||B.body,-1!==K(c,"display").indexOf("flex")&&(f.position="absolute"),l=c._gsCache,h=r.h.ticker.frame,l&&u&&l.time===h)return l.width*i/100;f[u?"width":"height"]=i+n}c.appendChild(j),o=parseFloat(j[u?"offsetWidth":"offsetHeight"]),c.removeChild(j),u&&"%"===n&&!1!==s.cacheWidths&&((l=c._gsCache=c._gsCache||{}).time=h,l.width=o/i*100),0!==o||a||(o=J(t,e,i,n,!0))}else l=Q(t).lineHeight,t.style.lineHeight=i,o=parseFloat(Q(t).lineHeight),t.style.lineHeight=l;return d&&(o/=100),p?-o:o},tt=V.calculateOffset=function(t,e,i){if("absolute"!==K(t,"position",i))return 0;var r="left"===e?"Left":"Top",n=K(t,"margin"+r,i);return t["offset"+r]-(J(t,e,parseFloat(n),n.replace(x,""))||0)},et=function(t,e){var i,r,n,s={};if(e=e||Q(t,null))if(i=e.length)for(;--i>-1;)-1!==(n=e[i]).indexOf("-transform")&&kt!==n||(s[n.replace(O,R)]=e.getPropertyValue(n));else for(i in e)-1!==i.indexOf("Transform")&&Ot!==i||(s[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===s[i]&&(s[i.replace(O,R)]=e[i]);return W||(s.opacity=H(t)),r=jt(t,e,!1),s.rotation=r.rotation,s.skewX=r.skewX,s.scaleX=r.scaleX,s.scaleY=r.scaleY,s.x=r.x,s.y=r.y,At&&(s.z=r.z,s.rotationX=r.rotationX,s.rotationY=r.rotationY,s.scaleZ=r.scaleZ),s.filters&&delete s.filters,s},it=function(t,e,i,r,n){var s,a,o,l={},h=t.style;for(a in i)"cssText"!==a&&"length"!==a&&isNaN(a)&&(e[a]!==(s=i[a])||n&&n[a])&&-1===a.indexOf("Origin")&&("number"!=typeof s&&"string"!=typeof s||(l[a]="auto"!==s||"left"!==a&&"top"!==a?""!==s&&"auto"!==s&&"none"!==s||"string"!=typeof e[a]||""===e[a].replace(b,"")?s:0:tt(t,a),void 0!==h[a]&&(o=new gt(h,a,h[a],o))));if(r)for(a in r)"className"!==a&&(l[a]=r[a]);return{difs:l,firstMPT:o}},rt={width:["Left","Right"],height:["Top","Bottom"]},nt=["marginLeft","marginRight","marginTop","marginBottom"],st=function(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||Q(t))[e]||0;if(t.getCTM&&Lt(t))return t.getBBox()[e]||0;var r=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),n=rt[e],s=n.length;for(i=i||Q(t,null);--s>-1;)r-=parseFloat(K(t,"padding"+n[s],i,!0))||0,r-=parseFloat(K(t,"border"+n[s]+"Width",i,!0))||0;return r},at=function(t,e){if("contain"===t||"auto"===t||"auto auto"===t)return t+" ";null!=t&&""!==t||(t="0 0");var i,r=t.split(" "),n=-1!==t.indexOf("left")?"0%":-1!==t.indexOf("right")?"100%":r[0],s=-1!==t.indexOf("top")?"0%":-1!==t.indexOf("bottom")?"100%":r[1];if(r.length>3&&!e){for(r=t.split(", ").join(",").split(","),t=[],i=0;i<r.length;i++)t.push(at(r[i]));return t.join(",")}return null==s?s="center"===n?"50%":"0":"center"===s&&(s="50%"),("center"===n||isNaN(parseFloat(n))&&-1===(n+"").indexOf("="))&&(n="50%"),t=n+" "+s+(r.length>2?" "+r[2]:""),e&&(e.oxp=-1!==n.indexOf("%"),e.oyp=-1!==s.indexOf("%"),e.oxr="="===n.charAt(1),e.oyr="="===s.charAt(1),e.ox=parseFloat(n.replace(b,"")),e.oy=parseFloat(s.replace(b,"")),e.v=t),e||t},ot=function(t,e){return"function"==typeof t&&(t=t(m,_)),"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0},lt=function(t,e){"function"==typeof t&&(t=t(m,_));var i="string"==typeof t&&"="===t.charAt(1);return"string"==typeof t&&"v"===t.charAt(t.length-2)&&(t=(i?t.substr(0,2):0)+window["inner"+("vh"===t.substr(-2)?"Height":"Width")]*(parseFloat(i?t.substr(2):t)/100)),null==t?e:i?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0},ht=function(t,e,i,r){var n,s,a,o,l;return"function"==typeof t&&(t=t(m,_)),null==t?o=e:"number"==typeof t?o=t:(n=360,s=t.split("_"),a=((l="="===t.charAt(1))?parseInt(t.charAt(0)+"1",10)*parseFloat(s[0].substr(2)):parseFloat(s[0]))*(-1===t.indexOf("rad")?1:N)-(l?0:e),s.length&&(r&&(r[i]=e+a),-1!==t.indexOf("short")&&(a%=n)!==a%(n/2)&&(a=a<0?a+n:a-n),-1!==t.indexOf("_cw")&&a<0?a=(a+9999999999*n)%n-(a/n|0)*n:-1!==t.indexOf("ccw")&&a>0&&(a=(a-9999999999*n)%n-(a/n|0)*n)),o=e+a),o<1e-6&&o>-1e-6&&(o=0),o},ut={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},ct=function(t,e,i){return 255*(6*(t=t<0?t+1:t>1?t-1:t)<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0},ft=s.parseColor=function(t,e){var i,r,n,s,a,o,l,h,u,c,f;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ut[t])i=ut[t];else if("#"===t.charAt(0))4===t.length&&(t="#"+(r=t.charAt(1))+r+(n=t.charAt(2))+n+(s=t.charAt(3))+s),i=[(t=parseInt(t.substr(1),16))>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=f=t.match(g),e){if(-1!==t.indexOf("="))return t.match(y)}else a=Number(i[0])%360/360,o=Number(i[1])/100,r=2*(l=Number(i[2])/100)-(n=l<=.5?l*(o+1):l+o-l*o),i.length>3&&(i[3]=Number(i[3])),i[0]=ct(a+1/3,r,n),i[1]=ct(a,r,n),i[2]=ct(a-1/3,r,n);else i=t.match(g)||ut.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),i.length>3&&(i[3]=Number(i[3]))}else i=ut.black;return e&&!f&&(r=i[0]/255,n=i[1]/255,s=i[2]/255,l=((h=Math.max(r,n,s))+(u=Math.min(r,n,s)))/2,h===u?a=o=0:(c=h-u,o=l>.5?c/(2-h-u):c/(h+u),a=h===r?(n-s)/c+(n<s?6:0):h===n?(s-r)/c+2:(r-n)/c+4,a*=60),i[0]=a+.5|0,i[1]=100*o+.5|0,i[2]=100*l+.5|0),i},pt=function(t,e){var i,r,n,s=t.match(dt)||[],a=0,o="";if(!s.length)return t;for(i=0;i<s.length;i++)r=s[i],a+=(n=t.substr(a,t.indexOf(r,a)-a)).length+r.length,3===(r=ft(r,e)).length&&r.push(1),o+=n+(e?"hsla("+r[0]+","+r[1]+"%,"+r[2]+"%,"+r[3]:"rgba("+r.join(","))+")";return o+t.substr(a)},dt="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(l in ut)dt+="|"+l+"\\b";dt=new RegExp(dt+")","gi"),s.colorStringFilter=function(t){var e,i=t[0]+" "+t[1];dt.test(i)&&(e=-1!==i.indexOf("hsl(")||-1!==i.indexOf("hsla("),t[0]=pt(t[0],e),t[1]=pt(t[1],e)),dt.lastIndex=0},r.h.defaultStringFilter||(r.h.defaultStringFilter=s.colorStringFilter);var _t=function(t,e,i,r){if(null==t)return function(t){return t};var n,s=e?(t.match(dt)||[""])[0]:"",a=t.split(s).join("").match(v)||[],o=t.substr(0,t.indexOf(a[0])),l=")"===t.charAt(t.length-1)?")":"",h=-1!==t.indexOf(" ")?" ":",",u=a.length,c=u>0?a[0].replace(g,""):"";return u?n=e?function(t){var e,f,p,d;if("number"==typeof t)t+=c;else if(r&&D.test(t)){for(d=t.replace(D,"|").split("|"),p=0;p<d.length;p++)d[p]=n(d[p]);return d.join(",")}if(e=(t.match(dt)||[s])[0],p=(f=t.split(e).join("").match(v)||[]).length,u>p--)for(;++p<u;)f[p]=i?f[(p-1)/2|0]:a[p];return o+f.join(h)+h+e+l+(-1!==t.indexOf("inset")?" inset":"")}:function(t){var e,s,f;if("number"==typeof t)t+=c;else if(r&&D.test(t)){for(s=t.replace(D,"|").split("|"),f=0;f<s.length;f++)s[f]=n(s[f]);return s.join(",")}if(f=(e=t.match(v)||[]).length,u>f--)for(;++f<u;)e[f]=i?e[(f-1)/2|0]:a[f];return o+e.join(h)+l}:function(t){return t}},mt=function(t){return t=t.split(","),function(e,i,r,n,s,a,o){var l,h=(i+"").split(" ");for(o={},l=0;l<4;l++)o[t[l]]=h[l]=h[l]||h[(l-1)/2>>0];return n.parse(e,o,s,a)}},gt=(V._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,r,n,s,a=this.data,o=a.proxy,l=a.firstMPT;l;)e=o[l.v],l.r?e=l.r(e):e<1e-6&&e>-1e-6&&(e=0),l.t[l.p]=e,l=l._next;if(a.autoRotate&&(a.autoRotate.rotation=a.mod?a.mod.call(this._tween,o.rotation,this.t,this._tween):o.rotation),1===t||0===t)for(l=a.firstMPT,s=1===t?"e":"b";l;){if((i=l.t).type){if(1===i.type){for(n=i.xs0+i.s+i.xs1,r=1;r<i.l;r++)n+=i["xn"+r]+i["xs"+(r+1)];i[s]=n}}else i[s]=i.s+i.xs0;l=l._next}},function(t,e,i,r,n){this.t=t,this.p=e,this.v=i,this.r=n,r&&(r._prev=this,this._next=r)}),yt=(V._parseToProxy=function(t,e,i,r,n,s){var a,o,l,h,u,c=r,f={},p={},d=i._transform,_=I;for(i._transform=null,I=e,r=u=i.parse(t,e,r,n),I=_,s&&(i._transform=d,c&&(c._prev=null,c._prev&&(c._prev._next=null)));r&&r!==c;){if(r.type<=1&&(p[o=r.p]=r.s+r.c,f[o]=r.s,s||(h=new gt(r,"s",o,h,r.r),r.c=0),1===r.type))for(a=r.l;--a>0;)l="xn"+a,p[o=r.p+"_"+l]=r.data[l],f[o]=r[l],s||(h=new gt(r,l,o,h,r.rxp[l]));r=r._next}return{proxy:f,end:p,firstMPT:h,pt:u}},V.CSSPropTween=function(e,i,r,s,a,o,l,h,u,c,f){this.t=e,this.p=i,this.s=r,this.c=s,this.n=l||i,e instanceof yt||n.push(this.n),this.r=h?"function"==typeof h?h:Math.round:h,this.type=o||0,u&&(this.pr=u,t=!0),this.b=void 0===c?r:c,this.e=void 0===f?r+s:f,a&&(this._next=a,a._prev=this)}),vt=function(t,e,i,r,n,s){var a=new yt(t,e,i,r-i,n,-1,s);return a.b=i,a.e=a.xs0=r,a},bt=s.parseComplex=function(t,e,i,r,n,a,o,l,u,c){i=i||a||"","function"==typeof r&&(r=r(m,_)),o=new yt(t,e,0,0,o,c?2:1,null,!1,l,i,r),r+="",n&&dt.test(r+i)&&(r=[i,r],s.colorStringFilter(r),i=r[0],r=r[1]);var f,p,d,v,b,x,T,w,P,S,C,O,k,R=i.split(", ").join(",").split(" "),A=r.split(", ").join(",").split(" "),E=R.length,M=!1!==h;for(-1===r.indexOf(",")&&-1===i.indexOf(",")||(-1!==(r+i).indexOf("rgb")||-1!==(r+i).indexOf("hsl")?(R=R.join(" ").replace(D,", ").split(" "),A=A.join(" ").replace(D,", ").split(" ")):(R=R.join(" ").split(",").join(", ").split(" "),A=A.join(" ").split(",").join(", ").split(" ")),E=R.length),E!==A.length&&(E=(R=(a||"").split(" ")).length),o.plugin=u,o.setRatio=c,dt.lastIndex=0,f=0;f<E;f++)if(v=R[f],b=A[f]+"",(w=parseFloat(v))||0===w)o.appendXtra("",w,ot(b,w),b.replace(y,""),!(!M||-1===b.indexOf("px"))&&Math.round,!0);else if(n&&dt.test(v))O=")"+((O=b.indexOf(")")+1)?b.substr(O):""),k=-1!==b.indexOf("hsl")&&W,S=b,v=ft(v,k),b=ft(b,k),(P=v.length+b.length>6)&&!W&&0===b[3]?(o["xs"+o.l]+=o.l?" transparent":"transparent",o.e=o.e.split(A[f]).join("transparent")):(W||(P=!1),k?o.appendXtra(S.substr(0,S.indexOf("hsl"))+(P?"hsla(":"hsl("),v[0],ot(b[0],v[0]),",",!1,!0).appendXtra("",v[1],ot(b[1],v[1]),"%,",!1).appendXtra("",v[2],ot(b[2],v[2]),P?"%,":"%"+O,!1):o.appendXtra(S.substr(0,S.indexOf("rgb"))+(P?"rgba(":"rgb("),v[0],b[0]-v[0],",",Math.round,!0).appendXtra("",v[1],b[1]-v[1],",",Math.round).appendXtra("",v[2],b[2]-v[2],P?",":O,Math.round),P&&(v=v.length<4?1:v[3],o.appendXtra("",v,(b.length<4?1:b[3])-v,O,!1))),dt.lastIndex=0;else if(x=v.match(g)){if(!(T=b.match(y))||T.length!==x.length)return o;for(d=0,p=0;p<x.length;p++)C=x[p],S=v.indexOf(C,d),o.appendXtra(v.substr(d,S-d),Number(C),ot(T[p],C),"",!(!M||"px"!==v.substr(S+C.length,2))&&Math.round,0===p),d=S+C.length;o["xs"+o.l]+=v.substr(d)}else o["xs"+o.l]+=o.l||o["xs"+o.l]?" "+b:b;if(-1!==r.indexOf("=")&&o.data){for(O=o.xs0+o.data.s,f=1;f<o.l;f++)O+=o["xs"+f]+o.data["xn"+f];o.e=O+o["xs"+f]}return o.l||(o.type=-1,o.xs0=o.e),o.xfirst||o},xt=9;for((l=yt.prototype).l=l.pr=0;--xt>0;)l["xn"+xt]=0,l["xs"+xt]="";l.xs0="",l._next=l._prev=l.xfirst=l.data=l.plugin=l.setRatio=l.rxp=null,l.appendXtra=function(t,e,i,r,n,s){var a=this,o=a.l;return a["xs"+o]+=s&&(o||a["xs"+o])?" "+t:t||"",i||0===o||a.plugin?(a.l++,a.type=a.setRatio?2:1,a["xs"+a.l]=r||"",o>0?(a.data["xn"+o]=e+i,a.rxp["xn"+o]=n,a["xn"+o]=e,a.plugin||(a.xfirst=new yt(a,"xn"+o,e,i,a.xfirst||a,0,a.n,n,a.pr),a.xfirst.xs0=0),a):(a.data={s:e+i},a.rxp={},a.s=e,a.c=i,a.r=n,a)):(a["xs"+o]+=e+(r||""),a)};var Tt=function(t,e){e=e||{},this.p=e.prefix&&Z(t)||t,o[t]=o[this.p]=this,this.format=e.formatter||_t(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},wt=V._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var r,n=t.split(","),s=e.defaultValue;for(i=i||[s],r=0;r<n.length;r++)e.prefix=0===r&&e.prefix,e.defaultValue=i[r]||s,new Tt(n[r],e)},Pt=V._registerPluginProp=function(t){if(!o[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";wt(t,{parser:function(t,i,r,n,s,l,h){var u=a.com.greensock.plugins[e];return u?(u._cssRegister(),o[r].parse(t,i,r,n,s,l,h)):(U("Error: "+e+" js file not loaded."),s)}})}};(l=Tt.prototype).parseComplex=function(t,e,i,r,n,s){var a,o,l,h,u,c,f=this.keyword;if(this.multi&&(D.test(i)||D.test(e)?(o=e.replace(D,"|").split("|"),l=i.replace(D,"|").split("|")):f&&(o=[e],l=[i])),l){for(h=l.length>o.length?l.length:o.length,a=0;a<h;a++)e=o[a]=o[a]||this.dflt,i=l[a]=l[a]||this.dflt,f&&(u=e.indexOf(f))!==(c=i.indexOf(f))&&(-1===c?o[a]=o[a].split(f).join(""):-1===u&&(o[a]+=" "+f));e=o.join(", "),i=l.join(", ")}return bt(t,this.p,e,i,this.clrs,this.dflt,r,this.pr,n,s)},l.parse=function(t,e,r,n,s,a,o){return this.parseComplex(t.style,this.format(K(t,this.p,i,!1,this.dflt)),this.format(e),s,a)},s.registerSpecialProp=function(t,e,i){wt(t,{parser:function(t,r,n,s,a,o,l){var h=new yt(t,n,0,0,a,2,n,!1,i);return h.plugin=o,h.setRatio=e(t,r,s._tween,n),h},priority:i})},s.useSVGTransformAttr=!0;var St,Ct="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),Ot=Z("transform"),kt=q+"transform",Rt=Z("transformOrigin"),At=null!==Z("perspective"),Et=V.Transform=function(){this.perspective=parseFloat(s.defaultTransformPerspective)||0,this.force3D=!(!1===s.defaultForce3D||!At)&&(s.defaultForce3D||"auto")},Mt=r.g.SVGElement,Dt=function(t,e,i){var r,n=B.createElementNS("http://www.w3.org/2000/svg",t),s=/([a-z])([A-Z])/g;for(r in i)n.setAttributeNS(null,r.replace(s,"$1-$2").toLowerCase(),i[r]);return e.appendChild(n),n},Ft=B.documentElement||{},zt=function(){var t,e,i,n=d||/Android/i.test(Y)&&!r.g.chrome;return B.createElementNS&&!n&&(t=Dt("svg",Ft),i=(e=Dt("rect",t,{width:100,height:50,x:100})).getBoundingClientRect().width,e.style[Rt]="50% 50%",e.style[Ot]="scaleX(0.5)",n=i===e.getBoundingClientRect().width&&!(f&&At),Ft.removeChild(t)),n}(),Nt=function(t,e,i,r,n,a){var o,l,h,u,c,f,p,d,_,m,g,y,v,b,x=t._gsTransform,T=Xt(t,!0);x&&(v=x.xOrigin,b=x.yOrigin),(!r||(o=r.split(" ")).length<2)&&(0===(p=t.getBBox()).x&&0===p.y&&p.width+p.height===0&&(p={x:parseFloat(t.hasAttribute("x")?t.getAttribute("x"):t.hasAttribute("cx")?t.getAttribute("cx"):0)||0,y:parseFloat(t.hasAttribute("y")?t.getAttribute("y"):t.hasAttribute("cy")?t.getAttribute("cy"):0)||0,width:0,height:0}),o=[(-1!==(e=at(e).split(" "))[0].indexOf("%")?parseFloat(e[0])/100*p.width:parseFloat(e[0]))+p.x,(-1!==e[1].indexOf("%")?parseFloat(e[1])/100*p.height:parseFloat(e[1]))+p.y]),i.xOrigin=u=parseFloat(o[0]),i.yOrigin=c=parseFloat(o[1]),r&&T!==Bt&&(f=T[0],p=T[1],d=T[2],_=T[3],m=T[4],g=T[5],(y=f*_-p*d)&&(l=u*(_/y)+c*(-d/y)+(d*g-_*m)/y,h=u*(-p/y)+c*(f/y)-(f*g-p*m)/y,u=i.xOrigin=o[0]=l,c=i.yOrigin=o[1]=h)),x&&(a&&(i.xOffset=x.xOffset,i.yOffset=x.yOffset,x=i),n||!1!==n&&!1!==s.defaultSmoothOrigin?(l=u-v,h=c-b,x.xOffset+=l*T[0]+h*T[2]-l,x.yOffset+=l*T[1]+h*T[3]-h):x.xOffset=x.yOffset=0),a||t.setAttribute("data-svg-origin",o.join(" "))},It=function(t){var e,i=X("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),r=this.parentNode,n=this.nextSibling,s=this.style.cssText;if(Ft.appendChild(i),i.appendChild(this),this.style.display="block",t)try{e=this.getBBox(),this._originalGetBBox=this.getBBox,this.getBBox=It}catch(t){}else this._originalGetBBox&&(e=this._originalGetBBox());return n?r.insertBefore(this,n):r.appendChild(this),Ft.removeChild(i),this.style.cssText=s,e},Lt=function(t){return!(!Mt||!t.getCTM||t.parentNode&&!t.ownerSVGElement||!function(t){try{return t.getBBox()}catch(e){return It.call(t,!0)}}(t))},Bt=[1,0,0,1,0,0],Xt=function(t,e){var i,r,n,s,a,o,l=t._gsTransform||new Et,h=t.style;if(Ot?r=K(t,kt,null,!0):t.currentStyle&&(r=(r=t.currentStyle.filter.match(E))&&4===r.length?[r[0].substr(4),Number(r[2].substr(4)),Number(r[1].substr(4)),r[3].substr(4),l.x||0,l.y||0].join(","):""),i=!r||"none"===r||"matrix(1, 0, 0, 1, 0, 0)"===r,!Ot||!(o=!Q(t)||"none"===Q(t).display)&&t.parentNode||(o&&(s=h.display,h.display="block"),t.parentNode||(a=1,Ft.appendChild(t)),i=!(r=K(t,kt,null,!0))||"none"===r||"matrix(1, 0, 0, 1, 0, 0)"===r,s?h.display=s:o&&Wt(h,"display"),a&&Ft.removeChild(t)),(l.svg||t.getCTM&&Lt(t))&&(i&&-1!==(h[Ot]+"").indexOf("matrix")&&(r=h[Ot],i=0),n=t.getAttribute("transform"),i&&n&&(r="matrix("+(n=t.transform.baseVal.consolidate().matrix).a+","+n.b+","+n.c+","+n.d+","+n.e+","+n.f+")",i=0)),i)return Bt;for(n=(r||"").match(g)||[],xt=n.length;--xt>-1;)s=Number(n[xt]),n[xt]=(a=s-(s|=0))?(1e5*a+(a<0?-.5:.5)|0)/1e5+s:s;return e&&n.length>6?[n[0],n[1],n[4],n[5],n[12],n[13]]:n},jt=V.getTransform=function(t,e,i,n){if(t._gsTransform&&i&&!n)return t._gsTransform;var a,o,l,h,u,c,f=i&&t._gsTransform||new Et,p=f.scaleX<0,d=At&&(parseFloat(K(t,Rt,e,!1,"0 0 0").split(" ")[2])||f.zOrigin)||0,_=parseFloat(s.defaultTransformPerspective)||0;if(f.svg=!(!t.getCTM||!Lt(t)),f.svg&&(Nt(t,K(t,Rt,e,!1,"50% 50%")+"",f,t.getAttribute("data-svg-origin")),St=s.useSVGTransformAttr||zt),(a=Xt(t))!==Bt){if(16===a.length){var m,g,y,v,b,x=a[0],T=a[1],w=a[2],P=a[3],S=a[4],C=a[5],O=a[6],k=a[7],R=a[8],A=a[9],E=a[10],M=a[12],D=a[13],F=a[14],z=a[11],I=Math.atan2(O,E);f.zOrigin&&(M=R*(F=-f.zOrigin)-a[12],D=A*F-a[13],F=E*F+f.zOrigin-a[14]),f.rotationX=I*N,I&&(m=S*(v=Math.cos(-I))+R*(b=Math.sin(-I)),g=C*v+A*b,y=O*v+E*b,R=S*-b+R*v,A=C*-b+A*v,E=O*-b+E*v,z=k*-b+z*v,S=m,C=g,O=y),I=Math.atan2(-w,E),f.rotationY=I*N,I&&(g=T*(v=Math.cos(-I))-A*(b=Math.sin(-I)),y=w*v-E*b,A=T*b+A*v,E=w*b+E*v,z=P*b+z*v,x=m=x*v-R*b,T=g,w=y),I=Math.atan2(T,x),f.rotation=I*N,I&&(m=x*(v=Math.cos(I))+T*(b=Math.sin(I)),g=S*v+C*b,y=R*v+A*b,T=T*v-x*b,C=C*v-S*b,A=A*v-R*b,x=m,S=g,R=y),f.rotationX&&Math.abs(f.rotationX)+Math.abs(f.rotation)>359.9&&(f.rotationX=f.rotation=0,f.rotationY=180-f.rotationY),I=Math.atan2(S,C),f.scaleX=(1e5*Math.sqrt(x*x+T*T+w*w)+.5|0)/1e5,f.scaleY=(1e5*Math.sqrt(C*C+O*O)+.5|0)/1e5,f.scaleZ=(1e5*Math.sqrt(R*R+A*A+E*E)+.5|0)/1e5,x/=f.scaleX,S/=f.scaleY,T/=f.scaleX,C/=f.scaleY,Math.abs(I)>2e-5?(f.skewX=I*N,S=0,"simple"!==f.skewType&&(f.scaleY*=1/Math.cos(I))):f.skewX=0,f.perspective=z?1/(z<0?-z:z):0,f.x=M,f.y=D,f.z=F,f.svg&&(f.x-=f.xOrigin-(f.xOrigin*x-f.yOrigin*S),f.y-=f.yOrigin-(f.yOrigin*T-f.xOrigin*C))}else if(!At||n||!a.length||f.x!==a[4]||f.y!==a[5]||!f.rotationX&&!f.rotationY){var L=a.length>=6,B=L?a[0]:1,X=a[1]||0,j=a[2]||0,$=L?a[3]:1;f.x=a[4]||0,f.y=a[5]||0,l=Math.sqrt(B*B+X*X),h=Math.sqrt($*$+j*j),u=B||X?Math.atan2(X,B)*N:f.rotation||0,c=j||$?Math.atan2(j,$)*N+u:f.skewX||0,f.scaleX=l,f.scaleY=h,f.rotation=u,f.skewX=c,At&&(f.rotationX=f.rotationY=f.z=0,f.perspective=_,f.scaleZ=1),f.svg&&(f.x-=f.xOrigin-(f.xOrigin*B+f.yOrigin*j),f.y-=f.yOrigin-(f.xOrigin*X+f.yOrigin*$))}for(o in Math.abs(f.skewX)>90&&Math.abs(f.skewX)<270&&(p?(f.scaleX*=-1,f.skewX+=f.rotation<=0?180:-180,f.rotation+=f.rotation<=0?180:-180):(f.scaleY*=-1,f.skewX+=f.skewX<=0?180:-180)),f.zOrigin=d,f)f[o]<2e-5&&f[o]>-2e-5&&(f[o]=0)}return i&&(t._gsTransform=f,f.svg&&(St&&t.style[Ot]?r.h.delayedCall(.001,function(){Wt(t.style,Ot)}):!St&&t.getAttribute("transform")&&r.h.delayedCall(.001,function(){t.removeAttribute("transform")}))),f},$t=function(t){var e,i,r=this.data,n=-r.rotation*z,s=n+r.skewX*z,a=(Math.cos(n)*r.scaleX*1e5|0)/1e5,o=(Math.sin(n)*r.scaleX*1e5|0)/1e5,l=(Math.sin(s)*-r.scaleY*1e5|0)/1e5,h=(Math.cos(s)*r.scaleY*1e5|0)/1e5,u=this.t.style,c=this.t.currentStyle;if(c){i=o,o=-l,l=-i,e=c.filter,u.filter="";var f,p,_=this.t.offsetWidth,m=this.t.offsetHeight,g="absolute"!==c.position,y="progid:DXImageTransform.Microsoft.Matrix(M11="+a+", M12="+o+", M21="+l+", M22="+h,v=r.x+_*r.xPercent/100,b=r.y+m*r.yPercent/100;if(null!=r.ox&&(v+=(f=(r.oxp?_*r.ox*.01:r.ox)-_/2)-(f*a+(p=(r.oyp?m*r.oy*.01:r.oy)-m/2)*o),b+=p-(f*l+p*h)),y+=g?", Dx="+((f=_/2)-(f*a+(p=m/2)*o)+v)+", Dy="+(p-(f*l+p*h)+b)+")":", sizingMethod='auto expand')",-1!==e.indexOf("DXImageTransform.Microsoft.Matrix(")?u.filter=e.replace(M,y):u.filter=y+" "+e,0!==t&&1!==t||1===a&&0===o&&0===l&&1===h&&(g&&-1===y.indexOf("Dx=0, Dy=0")||T.test(e)&&100!==parseFloat(RegExp.$1)||-1===e.indexOf(e.indexOf("Alpha"))&&u.removeAttribute("filter")),!g){var w,P,S,C=d<8?1:-1;for(f=r.ieOffsetX||0,p=r.ieOffsetY||0,r.ieOffsetX=Math.round((_-((a<0?-a:a)*_+(o<0?-o:o)*m))/2+v),r.ieOffsetY=Math.round((m-((h<0?-h:h)*m+(l<0?-l:l)*_))/2+b),xt=0;xt<4;xt++)S=(i=-1!==(w=c[P=nt[xt]]).indexOf("px")?parseFloat(w):J(this.t,P,parseFloat(w),w.replace(x,""))||0)!==r[P]?xt<2?-r.ieOffsetX:-r.ieOffsetY:xt<2?f-r.ieOffsetX:p-r.ieOffsetY,u[P]=(r[P]=Math.round(i-S*(0===xt||2===xt?1:C)))+"px"}}},Vt=V.set3DTransformRatio=V.setTransformRatio=function(t){var e,i,r,n,s,a,o,l,h,u,c,p,d,_,m,g,y,v,b,x,T,w=this.data,P=this.t.style,S=w.rotation,C=w.rotationX,O=w.rotationY,k=w.scaleX,R=w.scaleY,A=w.scaleZ,E=w.x,M=w.y,D=w.z,F=w.svg,N=w.perspective,I=w.force3D,L=w.skewY,B=w.skewX;if(L&&(B+=L,S+=L),!((1!==t&&0!==t||"auto"!==I||this.tween._totalTime!==this.tween._totalDuration&&this.tween._totalTime)&&I||D||N||O||C||1!==A)||St&&F||!At)S||B||F?(S*=z,x=B*z,T=1e5,i=Math.cos(S)*k,s=Math.sin(S)*k,r=Math.sin(S-x)*-R,a=Math.cos(S-x)*R,x&&"simple"===w.skewType&&(e=Math.tan(x-L*z),r*=e=Math.sqrt(1+e*e),a*=e,L&&(e=Math.tan(L*z),i*=e=Math.sqrt(1+e*e),s*=e)),F&&(E+=w.xOrigin-(w.xOrigin*i+w.yOrigin*r)+w.xOffset,M+=w.yOrigin-(w.xOrigin*s+w.yOrigin*a)+w.yOffset,St&&(w.xPercent||w.yPercent)&&(m=this.t.getBBox(),E+=.01*w.xPercent*m.width,M+=.01*w.yPercent*m.height),E<(m=1e-6)&&E>-m&&(E=0),M<m&&M>-m&&(M=0)),b=(i*T|0)/T+","+(s*T|0)/T+","+(r*T|0)/T+","+(a*T|0)/T+","+E+","+M+")",F&&St?this.t.setAttribute("transform","matrix("+b):P[Ot]=(w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) matrix(":"matrix(")+b):P[Ot]=(w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) matrix(":"matrix(")+k+",0,0,"+R+","+E+","+M+")";else{if(f&&(k<(m=1e-4)&&k>-m&&(k=A=2e-5),R<m&&R>-m&&(R=A=2e-5),!N||w.z||w.rotationX||w.rotationY||(N=0)),S||B)S*=z,g=i=Math.cos(S),y=s=Math.sin(S),B&&(S-=B*z,g=Math.cos(S),y=Math.sin(S),"simple"===w.skewType&&(e=Math.tan((B-L)*z),g*=e=Math.sqrt(1+e*e),y*=e,w.skewY&&(e=Math.tan(L*z),i*=e=Math.sqrt(1+e*e),s*=e))),r=-y,a=g;else{if(!(O||C||1!==A||N||F))return void(P[Ot]=(w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) translate3d(":"translate3d(")+E+"px,"+M+"px,"+D+"px)"+(1!==k||1!==R?" scale("+k+","+R+")":""));i=a=1,r=s=0}u=1,n=o=l=h=c=p=0,d=N?-1/N:0,_=w.zOrigin,m=1e-6,",","0",(S=O*z)&&(g=Math.cos(S),l=-(y=Math.sin(S)),c=d*-y,n=i*y,o=s*y,u=g,d*=g,i*=g,s*=g),(S=C*z)&&(e=r*(g=Math.cos(S))+n*(y=Math.sin(S)),v=a*g+o*y,h=u*y,p=d*y,n=r*-y+n*g,o=a*-y+o*g,u*=g,d*=g,r=e,a=v),1!==A&&(n*=A,o*=A,u*=A,d*=A),1!==R&&(r*=R,a*=R,h*=R,p*=R),1!==k&&(i*=k,s*=k,l*=k,c*=k),(_||F)&&(_&&(E+=n*-_,M+=o*-_,D+=u*-_+_),F&&(E+=w.xOrigin-(w.xOrigin*i+w.yOrigin*r)+w.xOffset,M+=w.yOrigin-(w.xOrigin*s+w.yOrigin*a)+w.yOffset),E<m&&E>-m&&(E="0"),M<m&&M>-m&&(M="0"),D<m&&D>-m&&(D=0)),b=w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) matrix3d(":"matrix3d(",b+=(i<m&&i>-m?"0":i)+","+(s<m&&s>-m?"0":s)+","+(l<m&&l>-m?"0":l),b+=","+(c<m&&c>-m?"0":c)+","+(r<m&&r>-m?"0":r)+","+(a<m&&a>-m?"0":a),C||O||1!==A?(b+=","+(h<m&&h>-m?"0":h)+","+(p<m&&p>-m?"0":p)+","+(n<m&&n>-m?"0":n),b+=","+(o<m&&o>-m?"0":o)+","+(u<m&&u>-m?"0":u)+","+(d<m&&d>-m?"0":d)+","):b+=",0,0,0,0,1,0,",b+=E+","+M+","+D+","+(N?1+-D/N:1)+")",P[Ot]=b}};(l=Et.prototype).x=l.y=l.z=l.skewX=l.skewY=l.rotation=l.rotationX=l.rotationY=l.zOrigin=l.xPercent=l.yPercent=l.xOffset=l.yOffset=0,l.scaleX=l.scaleY=l.scaleZ=1,wt("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,r,n,a,o,l){if(n._lastParsedTransform===l)return a;n._lastParsedTransform=l;var h,u=l.scale&&"function"==typeof l.scale?l.scale:0;"function"==typeof l[r]&&(h=l[r],l[r]=e),u&&(l.scale=u(m,t));var c,f,p,d,g,y,v,b,x,T=t._gsTransform,w=t.style,P=Ct.length,S=l,C={},O=jt(t,i,!0,S.parseTransform),k=S.transform&&("function"==typeof S.transform?S.transform(m,_):S.transform);if(O.skewType=S.skewType||O.skewType||s.defaultSkewType,n._transform=O,"rotationZ"in S&&(S.rotation=S.rotationZ),k&&"string"==typeof k&&Ot)(f=j.style)[Ot]=k,f.display="block",f.position="absolute",-1!==k.indexOf("%")&&(f.width=K(t,"width"),f.height=K(t,"height")),B.body.appendChild(j),c=jt(j,null,!1),"simple"===O.skewType&&(c.scaleY*=Math.cos(c.skewX*z)),O.svg&&(y=O.xOrigin,v=O.yOrigin,c.x-=O.xOffset,c.y-=O.yOffset,(S.transformOrigin||S.svgOrigin)&&(k={},Nt(t,at(S.transformOrigin),k,S.svgOrigin,S.smoothOrigin,!0),y=k.xOrigin,v=k.yOrigin,c.x-=k.xOffset-O.xOffset,c.y-=k.yOffset-O.yOffset),(y||v)&&(b=Xt(j,!0),c.x-=y-(y*b[0]+v*b[2]),c.y-=v-(y*b[1]+v*b[3]))),B.body.removeChild(j),c.perspective||(c.perspective=O.perspective),null!=S.xPercent&&(c.xPercent=lt(S.xPercent,O.xPercent)),null!=S.yPercent&&(c.yPercent=lt(S.yPercent,O.yPercent));else if("object"==typeof S){if(c={scaleX:lt(null!=S.scaleX?S.scaleX:S.scale,O.scaleX),scaleY:lt(null!=S.scaleY?S.scaleY:S.scale,O.scaleY),scaleZ:lt(S.scaleZ,O.scaleZ),x:lt(S.x,O.x),y:lt(S.y,O.y),z:lt(S.z,O.z),xPercent:lt(S.xPercent,O.xPercent),yPercent:lt(S.yPercent,O.yPercent),perspective:lt(S.transformPerspective,O.perspective)},null!=(g=S.directionalRotation))if("object"==typeof g)for(f in g)S[f]=g[f];else S.rotation=g;"string"==typeof S.x&&-1!==S.x.indexOf("%")&&(c.x=0,c.xPercent=lt(S.x,O.xPercent)),"string"==typeof S.y&&-1!==S.y.indexOf("%")&&(c.y=0,c.yPercent=lt(S.y,O.yPercent)),c.rotation=ht("rotation"in S?S.rotation:"shortRotation"in S?S.shortRotation+"_short":O.rotation,O.rotation,"rotation",C),At&&(c.rotationX=ht("rotationX"in S?S.rotationX:"shortRotationX"in S?S.shortRotationX+"_short":O.rotationX||0,O.rotationX,"rotationX",C),c.rotationY=ht("rotationY"in S?S.rotationY:"shortRotationY"in S?S.shortRotationY+"_short":O.rotationY||0,O.rotationY,"rotationY",C)),c.skewX=ht(S.skewX,O.skewX),c.skewY=ht(S.skewY,O.skewY)}for(At&&null!=S.force3D&&(O.force3D=S.force3D,d=!0),(p=O.force3D||O.z||O.rotationX||O.rotationY||c.z||c.rotationX||c.rotationY||c.perspective)||null==S.scale||(c.scaleZ=1);--P>-1;)((k=c[x=Ct[P]]-O[x])>1e-6||k<-1e-6||null!=S[x]||null!=I[x])&&(d=!0,a=new yt(O,x,O[x],k,a),x in C&&(a.e=C[x]),a.xs0=0,a.plugin=o,n._overwriteProps.push(a.n));return k=S.transformOrigin,O.svg&&(k||S.svgOrigin)&&(y=O.xOffset,v=O.yOffset,Nt(t,at(k),c,S.svgOrigin,S.smoothOrigin),a=vt(O,"xOrigin",(T?O:c).xOrigin,c.xOrigin,a,"transformOrigin"),a=vt(O,"yOrigin",(T?O:c).yOrigin,c.yOrigin,a,"transformOrigin"),y===O.xOffset&&v===O.yOffset||(a=vt(O,"xOffset",T?y:O.xOffset,O.xOffset,a,"transformOrigin"),a=vt(O,"yOffset",T?v:O.yOffset,O.yOffset,a,"transformOrigin")),k="0px 0px"),(k||At&&p&&O.zOrigin)&&(Ot?(d=!0,x=Rt,k=(k||K(t,x,i,!1,"50% 50%"))+"",(a=new yt(w,x,0,0,a,-1,"transformOrigin")).b=w[x],a.plugin=o,At?(f=O.zOrigin,k=k.split(" "),O.zOrigin=(k.length>2&&(0===f||"0px"!==k[2])?parseFloat(k[2]):f)||0,a.xs0=a.e=k[0]+" "+(k[1]||"50%")+" 0px",(a=new yt(O,"zOrigin",0,0,a,-1,a.n)).b=f,a.xs0=a.e=O.zOrigin):a.xs0=a.e=k):at(k+"",O)),d&&(n._transformType=O.svg&&St||!p&&3!==this._transformType?2:3),h&&(l[r]=h),u&&(l.scale=u),a},prefix:!0}),wt("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),wt("borderRadius",{defaultValue:"0px",parser:function(t,r,n,s,a,o){r=this.format(r);var l,h,u,c,f,p,d,_,m,g,y,v,b,x,T,w,P=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],S=t.style;for(m=parseFloat(t.offsetWidth),g=parseFloat(t.offsetHeight),l=r.split(" "),h=0;h<P.length;h++)this.p.indexOf("border")&&(P[h]=Z(P[h])),-1!==(f=c=K(t,P[h],i,!1,"0px")).indexOf(" ")&&(f=(c=f.split(" "))[0],c=c[1]),p=u=l[h],d=parseFloat(f),v=f.substr((d+"").length),(b="="===p.charAt(1))?(_=parseInt(p.charAt(0)+"1",10),p=p.substr(2),_*=parseFloat(p),y=p.substr((_+"").length-(_<0?1:0))||""):(_=parseFloat(p),y=p.substr((_+"").length)),""===y&&(y=e[n]||v),y!==v&&(x=J(t,"borderLeft",d,v),T=J(t,"borderTop",d,v),"%"===y?(f=x/m*100+"%",c=T/g*100+"%"):"em"===y?(f=x/(w=J(t,"borderLeft",1,"em"))+"em",c=T/w+"em"):(f=x+"px",c=T+"px"),b&&(p=parseFloat(f)+_+y,u=parseFloat(c)+_+y)),a=bt(S,P[h],f+" "+c,p+" "+u,!1,"0px",a);return a},prefix:!0,formatter:_t("0px 0px 0px 0px",!1,!0)}),wt("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,r,n,s,a){return bt(t.style,r,this.format(K(t,r,i,!1,"0px 0px")),this.format(e),!1,"0px",s)},prefix:!0,formatter:_t("0px 0px",!1,!0)}),wt("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,r,n,s,a){var o,l,h,u,c,f,p="background-position",_=i||Q(t,null),m=this.format((_?d?_.getPropertyValue(p+"-x")+" "+_.getPropertyValue(p+"-y"):_.getPropertyValue(p):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),g=this.format(e);if(-1!==m.indexOf("%")!=(-1!==g.indexOf("%"))&&g.split(",").length<2&&(f=K(t,"backgroundImage").replace(k,""))&&"none"!==f){for(o=m.split(" "),l=g.split(" "),$.setAttribute("src",f),h=2;--h>-1;)(u=-1!==(m=o[h]).indexOf("%"))!==(-1!==l[h].indexOf("%"))&&(c=0===h?t.offsetWidth-$.width:t.offsetHeight-$.height,o[h]=u?parseFloat(m)/100*c+"px":parseFloat(m)/c*100+"%");m=o.join(" ")}return this.parseComplex(t.style,m,g,s,a)},formatter:at}),wt("backgroundSize",{defaultValue:"0 0",formatter:function(t){return"co"===(t+="").substr(0,2)?t:at(-1===t.indexOf(" ")?t+" "+t:t)}}),wt("perspective",{defaultValue:"0px",prefix:!0}),wt("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),wt("transformStyle",{prefix:!0}),wt("backfaceVisibility",{prefix:!0}),wt("userSelect",{prefix:!0}),wt("margin",{parser:mt("marginTop,marginRight,marginBottom,marginLeft")}),wt("padding",{parser:mt("paddingTop,paddingRight,paddingBottom,paddingLeft")}),wt("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,r,n,s,a){var o,l,h;return d<9?(l=t.currentStyle,h=d<8?" ":",",o="rect("+l.clipTop+h+l.clipRight+h+l.clipBottom+h+l.clipLeft+")",e=this.format(e).split(",").join(h)):(o=this.format(K(t,this.p,i,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,o,e,s,a)}}),wt("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),wt("autoRound,strictUnits",{parser:function(t,e,i,r,n){return n}}),wt("border",{defaultValue:"0px solid #000",parser:function(t,e,r,n,s,a){var o=K(t,"borderTopWidth",i,!1,"0px"),l=this.format(e).split(" "),h=l[0].replace(x,"");return"px"!==h&&(o=parseFloat(o)/J(t,"borderTopWidth",1,h)+h),this.parseComplex(t.style,this.format(o+" "+K(t,"borderTopStyle",i,!1,"solid")+" "+K(t,"borderTopColor",i,!1,"#000")),l.join(" "),s,a)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(dt)||["#000"])[0]}}),wt("borderWidth",{parser:mt("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),wt("float,cssFloat,styleFloat",{parser:function(t,e,i,r,n,s){var a=t.style,o="cssFloat"in a?"cssFloat":"styleFloat";return new yt(a,o,0,0,n,-1,i,!1,0,a[o],e)}});var Yt=function(t){var e,i=this.t,r=i.filter||K(this.data,"filter")||"",n=this.s+this.c*t|0;100===n&&(-1===r.indexOf("atrix(")&&-1===r.indexOf("radient(")&&-1===r.indexOf("oader(")?(i.removeAttribute("filter"),e=!K(this.data,"filter")):(i.filter=r.replace(P,""),e=!0)),e||(this.xn1&&(i.filter=r=r||"alpha(opacity="+n+")"),-1===r.indexOf("pacity")?0===n&&this.xn1||(i.filter=r+" alpha(opacity="+n+")"):i.filter=r.replace(T,"opacity="+n))};wt("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,r,n,s,a){var o=parseFloat(K(t,"opacity",i,!1,"1")),l=t.style,h="autoAlpha"===r;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+o),h&&1===o&&"hidden"===K(t,"visibility",i)&&0!==e&&(o=0),W?s=new yt(l,"opacity",o,e-o,s):((s=new yt(l,"opacity",100*o,100*(e-o),s)).xn1=h?1:0,l.zoom=1,s.type=2,s.b="alpha(opacity="+s.s+")",s.e="alpha(opacity="+(s.s+s.c)+")",s.data=t,s.plugin=a,s.setRatio=Yt),h&&((s=new yt(l,"visibility",0,0,s,-1,null,!1,0,0!==o?"inherit":"hidden",0===e?"hidden":"inherit")).xs0="inherit",n._overwriteProps.push(s.n),n._overwriteProps.push(r)),s}});var Wt=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(C,"-$1").toLowerCase())):t.removeAttribute(e))},Ht=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:Wt(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};wt("className",{parser:function(e,r,n,s,a,o,l){var h,u,c,f,p,d=e.getAttribute("class")||"",_=e.style.cssText;if((a=s._classNamePT=new yt(e,n,0,0,a,2)).setRatio=Ht,a.pr=-11,t=!0,a.b=d,u=et(e,i),c=e._gsClassPT){for(f={},p=c.data;p;)f[p.p]=1,p=p._next;c.setRatio(1)}return e._gsClassPT=a,a.e="="!==r.charAt(1)?r:d.replace(new RegExp("(?:\\s|^)"+r.substr(2)+"(?![\\w-])"),"")+("+"===r.charAt(0)?" "+r.substr(2):""),e.setAttribute("class",a.e),h=it(e,u,et(e),l,f),e.setAttribute("class",d),a.data=h.firstMPT,e.style.cssText=_,a=a.xfirst=s.parse(e,h.difs,a,o)}});var Ut=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,r,n,s,a=this.t.style,l=o.transform.parse;if("all"===this.e)a.cssText="",n=!0;else for(r=(e=this.e.split(" ").join("").split(",")).length;--r>-1;)i=e[r],o[i]&&(o[i].parse===l?n=!0:i="transformOrigin"===i?Rt:o[i].p),Wt(a,i);n&&(Wt(a,Ot),(s=this.t._gsTransform)&&(s.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(wt("clearProps",{parser:function(e,i,r,n,s){return(s=new yt(e,r,0,0,s,2)).setRatio=Ut,s.e=i,s.pr=-10,s.data=n._tween,t=!0,s}}),l="bezier,throwProps,physicsProps,physics2D".split(","),xt=l.length;xt--;)Pt(l[xt]);(l=s.prototype)._firstPT=l._lastParsedTransform=l._transform=null,l._onInitTween=function(r,a,l,f){if(!r.nodeType)return!1;this._target=_=r,this._tween=l,this._vars=a,m=f,h=a.autoRound,t=!1,e=a.suffixMap||s.suffixMap,i=Q(r,""),n=this._overwriteProps;var d,g,y,v,b,x,T,P,S,C=r.style;if(u&&""===C.zIndex&&("auto"!==(d=K(r,"zIndex",i))&&""!==d||this._addLazySet(C,"zIndex",0)),"string"==typeof a&&(v=C.cssText,d=et(r,i),C.cssText=v+";"+a,d=it(r,d,et(r)).difs,!W&&w.test(a)&&(d.opacity=parseFloat(RegExp.$1)),a=d,C.cssText=v),a.className?this._firstPT=g=o.className.parse(r,a.className,"className",this,null,null,a):this._firstPT=g=this.parse(r,a,null),this._transformType){for(S=3===this._transformType,Ot?c&&(u=!0,""===C.zIndex&&("auto"!==(T=K(r,"zIndex",i))&&""!==T||this._addLazySet(C,"zIndex",0)),p&&this._addLazySet(C,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(S?"visible":"hidden"))):C.zoom=1,y=g;y&&y._next;)y=y._next;P=new yt(r,"transform",0,0,null,2),this._linkCSSP(P,null,y),P.setRatio=Ot?Vt:$t,P.data=this._transform||jt(r,i,!0),P.tween=l,P.pr=-1,n.pop()}if(t){for(;g;){for(x=g._next,y=v;y&&y.pr>g.pr;)y=y._next;(g._prev=y?y._prev:b)?g._prev._next=g:v=g,(g._next=y)?y._prev=g:b=g,g=x}this._firstPT=v}return!0},l.parse=function(t,r,n,s){var a,l,u,c,f,p,d,g,y,v,b=t.style;for(a in r){if("function"==typeof(p=r[a])&&(p=p(m,_)),l=o[a])n=l.parse(t,p,a,this,n,s,r);else{if("--"===a.substr(0,2)){this._tween._propLookup[a]=this._addTween.call(this._tween,t.style,"setProperty",Q(t).getPropertyValue(a)+"",p+"",a,!1,a);continue}f=K(t,a,i)+"",y="string"==typeof p,"color"===a||"fill"===a||"stroke"===a||-1!==a.indexOf("Color")||y&&S.test(p)?(y||(p=((p=ft(p)).length>3?"rgba(":"rgb(")+p.join(",")+")"),n=bt(b,a,f,p,!0,"transparent",n,0,s)):y&&F.test(p)?n=bt(b,a,f,p,!0,null,n,0,s):(d=(u=parseFloat(f))||0===u?f.substr((u+"").length):"",""!==f&&"auto"!==f||("width"===a||"height"===a?(u=st(t,a,i),d="px"):"left"===a||"top"===a?(u=tt(t,a,i),d="px"):(u="opacity"!==a?0:1,d="")),(v=y&&"="===p.charAt(1))?(c=parseInt(p.charAt(0)+"1",10),p=p.substr(2),c*=parseFloat(p),g=p.replace(x,"")):(c=parseFloat(p),g=y?p.replace(x,""):""),""===g&&(g=a in e?e[a]:d),p=c||0===c?(v?c+u:c)+g:r[a],d!==g&&(""===g&&"lineHeight"!==a||(c||0===c)&&u&&(u=J(t,a,u,d),"%"===g?(u/=J(t,a,100,"%")/100,!0!==r.strictUnits&&(f=u+"%")):"em"===g||"rem"===g||"vw"===g||"vh"===g?u/=J(t,a,1,g):"px"!==g&&(c=J(t,a,c,g),g="px"),v&&(c||0===c)&&(p=c+u+g))),v&&(c+=u),!u&&0!==u||!c&&0!==c?void 0!==b[a]&&(p||p+""!="NaN"&&null!=p)?(n=new yt(b,a,c||u||0,0,n,-1,a,!1,0,f,p)).xs0="none"!==p||"display"!==a&&-1===a.indexOf("Style")?p:f:U("invalid "+a+" tween value: "+r[a]):(n=new yt(b,a,u,c-u,n,0,a,!1!==h&&("px"===g||"zIndex"===a),0,f,p)).xs0=g)}s&&n&&!n.plugin&&(n.plugin=s)}return n},l.setRatio=function(t){var e,i,r,n=this._firstPT;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||-1e-6===this._tween._rawPrevTime)for(;n;){if(e=n.c*t+n.s,n.r?e=n.r(e):e<1e-6&&e>-1e-6&&(e=0),n.type)if(1===n.type)if(2===(r=n.l))n.t[n.p]=n.xs0+e+n.xs1+n.xn1+n.xs2;else if(3===r)n.t[n.p]=n.xs0+e+n.xs1+n.xn1+n.xs2+n.xn2+n.xs3;else if(4===r)n.t[n.p]=n.xs0+e+n.xs1+n.xn1+n.xs2+n.xn2+n.xs3+n.xn3+n.xs4;else if(5===r)n.t[n.p]=n.xs0+e+n.xs1+n.xn1+n.xs2+n.xn2+n.xs3+n.xn3+n.xs4+n.xn4+n.xs5;else{for(i=n.xs0+e+n.xs1,r=1;r<n.l;r++)i+=n["xn"+r]+n["xs"+(r+1)];n.t[n.p]=i}else-1===n.type?n.t[n.p]=n.xs0:n.setRatio&&n.setRatio(t);else n.t[n.p]=e+n.xs0;n=n._next}else for(;n;)2!==n.type?n.t[n.p]=n.b:n.setRatio(t),n=n._next;else for(;n;){if(2!==n.type)if(n.r&&-1!==n.type)if(e=n.r(n.s+n.c),n.type){if(1===n.type){for(r=n.l,i=n.xs0+e+n.xs1,r=1;r<n.l;r++)i+=n["xn"+r]+n["xs"+(r+1)];n.t[n.p]=i}}else n.t[n.p]=e+n.xs0;else n.t[n.p]=n.e;else n.setRatio(t);n=n._next}},l._enableTransforms=function(t){this._transform=this._transform||jt(this._target,i,!0),this._transformType=this._transform.svg&&St||!t&&3!==this._transformType?2:3};var qt=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};l._addLazySet=function(t,e,i){var r=this._firstPT=new yt(t,e,0,0,this._firstPT,2);r.e=i,r.setRatio=qt,r.data=this},l._linkCSSP=function(t,e,i,r){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,r=!0),i?i._next=t:r||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},l._mod=function(t){for(var e=this._firstPT;e;)"function"==typeof t[e.p]&&(e.r=t[e.p]),e=e._next},l._kill=function(t){var e,i,n,s=t;if(t.autoAlpha||t.alpha){for(i in s={},t)s[i]=t[i];s.opacity=1,s.autoAlpha&&(s.visibility=1)}for(t.className&&(e=this._classNamePT)&&((n=e.xfirst)&&n._prev?this._linkCSSP(n._prev,e._next,n._prev._prev):n===this._firstPT&&(this._firstPT=e._next),e._next&&this._linkCSSP(e._next,e._next._next,n._prev),this._classNamePT=null),e=this._firstPT;e;)e.plugin&&e.plugin!==i&&e.plugin._kill&&(e.plugin._kill(t),i=e.plugin),e=e._next;return r.f.prototype._kill.call(this,s)};var Gt=function(t,e,i){var r,n,s,a;if(t.slice)for(n=t.length;--n>-1;)Gt(t[n],e,i);else for(n=(r=t.childNodes).length;--n>-1;)a=(s=r[n]).type,s.style&&(e.push(et(s)),i&&i.push(s)),1!==a&&9!==a&&11!==a||!s.childNodes.length||Gt(s,e,i)};return s.cascadeTo=function(t,e,i){var n,s,a,o,l=r.h.to(t,e,i),h=[l],u=[],c=[],f=[],p=r.h._internals.reservedProps;for(t=l._targets||l.target,Gt(t,u,f),l.render(e,!0,!0),Gt(t,c),l.render(0,!0,!0),l._enabled(!0),n=f.length;--n>-1;)if((s=it(f[n],u[n],c[n])).firstMPT){for(a in s=s.difs,i)p[a]&&(s[a]=i[a]);for(a in o={},s)o[a]=u[n][a];h.push(r.h.fromTo(f[n],e,o,s))}return h},r.f.activate([s]),s},!0);var a=r.i.CSSPlugin,o=r.g._gsDefine.plugin({propName:"attr",API:2,version:"0.6.1",init:function(t,e,i,r){var n,s;if("function"!=typeof t.setAttribute)return!1;for(n in e)"function"==typeof(s=e[n])&&(s=s(r,t)),this._addTween(t,"setAttribute",t.getAttribute(n)+"",s+"",n,!1,n),this._overwriteProps.push(n);return!0}}),l=r.g._gsDefine.plugin({propName:"roundProps",version:"1.7.0",priority:-1,API:2,init:function(t,e,i){return this._tween=i,!0}}),h=function(t){var e=t<1?Math.pow(10,(t+"").length-2):1;return function(i){return(Math.round(i/t)*t*e|0)/e}},u=function(t,e){for(;t;)t.f||t.blob||(t.m=e||Math.round),t=t._next},c=l.prototype;
/*!
 * VERSION: 0.6.1
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */c._onInitAllProps=function(){var t,e,i,r,n=this._tween,s=n.vars.roundProps,a={},o=n._propLookup.roundProps;if("object"!=typeof s||s.push)for("string"==typeof s&&(s=s.split(",")),i=s.length;--i>-1;)a[s[i]]=Math.round;else for(r in s)a[r]=h(s[r]);for(r in a)for(t=n._firstPT;t;)e=t._next,t.pg?t.t._mod(a):t.n===r&&(2===t.f&&t.t?u(t.t._firstPT,a[r]):(this._add(t.t,r,t.s,t.c,a[r]),e&&(e._prev=t._prev),t._prev?t._prev._next=e:n._firstPT===t&&(n._firstPT=e),t._next=t._prev=null,n._propLookup[r]=o)),t=e;return!1},c._add=function(t,e,i,r,n){this._addTween(t,e,i,i+r,e,n||Math.round),this._overwriteProps.push(e)};
/*!
 * VERSION: 0.3.1
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
var f=r.g._gsDefine.plugin({propName:"directionalRotation",version:"0.3.1",API:2,init:function(t,e,i,r){"object"!=typeof e&&(e={rotation:e}),this.finals={};var n,s,a,o,l,h,u=!0===e.useRadians?2*Math.PI:360;for(n in e)"useRadians"!==n&&("function"==typeof(o=e[n])&&(o=o(r,t)),s=(h=(o+"").split("_"))[0],a=parseFloat("function"!=typeof t[n]?t[n]:t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)]()),l=(o=this.finals[n]="string"==typeof s&&"="===s.charAt(1)?a+parseInt(s.charAt(0)+"1",10)*Number(s.substr(2)):Number(s)||0)-a,h.length&&(-1!==(s=h.join("_")).indexOf("short")&&(l%=u)!==l%(u/2)&&(l=l<0?l+u:l-u),-1!==s.indexOf("_cw")&&l<0?l=(l+9999999999*u)%u-(l/u|0)*u:-1!==s.indexOf("ccw")&&l>0&&(l=(l-9999999999*u)%u-(l/u|0)*u)),(l>1e-6||l<-1e-6)&&(this._addTween(t,n,a,a+l,n),this._overwriteProps.push(n)));return!0},set:function(t){var e;if(1!==t)this._super.setRatio.call(this,t);else for(e=this._firstPT;e;)e.f?e.t[e.p](this.finals[e.p]):e.t[e.p]=this.finals[e.p],e=e._next}});f._autoCSS=!0,
/*!
 * VERSION: 2.0.2
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */
r.g._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(){var t=function(t){n.call(this,t),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=!0===this.vars.yoyo,this._dirty=!0},e=r.h._internals,i=e.lazyTweens,s=e.lazyRender,a=r.g._gsDefine.globals,o=new r.b(null,null,1,0),l=t.prototype=new n;return l.constructor=t,l.kill()._gc=!1,t.version="2.0.2",l.invalidate=function(){return this._yoyo=!0===this.vars.yoyo,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),n.prototype.invalidate.call(this)},l.addCallback=function(t,e,i,n){return this.add(r.h.delayedCall(0,t,i,n),e)},l.removeCallback=function(t,e){if(t)if(null==e)this._kill(null,t);else for(var i=this.getTweensOf(t,!1),r=i.length,n=this._parseTimeOrLabel(e);--r>-1;)i[r]._startTime===n&&i[r]._enabled(!1,!1);return this},l.removePause=function(t){return this.removeCallback(n._internals.pauseCallback,t)},l.tweenTo=function(t,e){e=e||{};var i,n,s,l={ease:o,useFrames:this.usesFrames(),immediateRender:!1,lazy:!1},h=e.repeat&&a.TweenMax||r.h;for(n in e)l[n]=e[n];return l.time=this._parseTimeOrLabel(t),i=Math.abs(Number(l.time)-this._time)/this._timeScale||.001,s=new h(this,i,l),l.onStart=function(){s.target.paused(!0),s.vars.time===s.target.time()||i!==s.duration()||s.isFromTo||s.duration(Math.abs(s.vars.time-s.target.time())/s.target._timeScale).render(s.time(),!0,!0),e.onStart&&e.onStart.apply(e.onStartScope||e.callbackScope||s,e.onStartParams||[])},s},l.tweenFromTo=function(t,e,i){i=i||{},t=this._parseTimeOrLabel(t),i.startAt={onComplete:this.seek,onCompleteParams:[t],callbackScope:this},i.immediateRender=!1!==i.immediateRender;var r=this.tweenTo(e,i);return r.isFromTo=1,r.duration(Math.abs(r.vars.time-t)/this._timeScale||.001)},l.render=function(t,e,r){this._gc&&this._enabled(!0,!1);var n,a,o,l,h,u,c,f,p=this._time,d=this._dirty?this.totalDuration():this._totalDuration,_=this._duration,m=this._totalTime,g=this._startTime,y=this._timeScale,v=this._rawPrevTime,b=this._paused,x=this._cycle;if(p!==this._time&&(t+=this._time-p),t>=d-1e-7&&t>=0)this._locked||(this._totalTime=d,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(a=!0,l="onComplete",h=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||v<0||1e-10===v)&&v!==t&&this._first&&(h=!0,v>1e-10&&(l="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-10,this._yoyo&&0!=(1&this._cycle)?this._time=t=0:(this._time=_,t=_+1e-4);else if(t<1e-7)if(this._locked||(this._totalTime=this._cycle=0),this._time=0,(0!==p||0===_&&1e-10!==v&&(v>0||t<0&&v>=0)&&!this._locked)&&(l="onReverseComplete",a=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(h=a=!0,l="onReverseComplete"):v>=0&&this._first&&(h=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=_||!e||t||this._rawPrevTime===t?t:1e-10,0===t&&a)for(n=this._first;n&&0===n._startTime;)n._duration||(a=!1),n=n._next;t=0,this._initted||(h=!0)}else if(0===_&&v<0&&(h=!0),this._time=this._rawPrevTime=t,this._locked||(this._totalTime=t,0!==this._repeat&&(u=_+this._repeatDelay,this._cycle=this._totalTime/u>>0,0!==this._cycle&&this._cycle===this._totalTime/u&&m<=t&&this._cycle--,this._time=this._totalTime-this._cycle*u,this._yoyo&&0!=(1&this._cycle)&&(this._time=_-this._time),this._time>_?(this._time=_,t=_+1e-4):this._time<0?this._time=t=0:t=this._time)),this._hasPause&&!this._forcingPlayhead&&!e){if((t=this._time)>=p||this._repeat&&x!==this._cycle)for(n=this._first;n&&n._startTime<=t&&!c;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(c=n),n=n._next;else for(n=this._last;n&&n._startTime>=t&&!c;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(c=n),n=n._prev;c&&c._startTime<_&&(this._time=t=c._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}if(this._cycle!==x&&!this._locked){var T=this._yoyo&&0!=(1&x),w=T===(this._yoyo&&0!=(1&this._cycle)),P=this._totalTime,S=this._cycle,C=this._rawPrevTime,O=this._time;if(this._totalTime=x*_,this._cycle<x?T=!T:this._totalTime+=_,this._time=p,this._rawPrevTime=0===_?v-1e-4:v,this._cycle=x,this._locked=!0,p=T?0:_,this.render(p,e,0===_),e||this._gc||this.vars.onRepeat&&(this._cycle=S,this._locked=!1,this._callback("onRepeat")),p!==this._time)return;if(w&&(this._cycle=x,this._locked=!0,p=T?_+1e-4:-1e-4,this.render(p,!0,!1)),this._locked=!1,this._paused&&!b)return;this._time=O,this._totalTime=P,this._cycle=S,this._rawPrevTime=C}if(this._time!==p&&this._first||r||h||c){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==m&&t>0&&(this._active=!0),0===m&&this.vars.onStart&&(0===this._totalTime&&this._totalDuration||e||this._callback("onStart")),(f=this._time)>=p)for(n=this._first;n&&(o=n._next,f===this._time&&(!this._paused||b));)(n._active||n._startTime<=this._time&&!n._paused&&!n._gc)&&(c===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,r):n.render((t-n._startTime)*n._timeScale,e,r)),n=o;else for(n=this._last;n&&(o=n._prev,f===this._time&&(!this._paused||b));){if(n._active||n._startTime<=p&&!n._paused&&!n._gc){if(c===n){for(c=n._prev;c&&c.endTime()>this._time;)c.render(c._reversed?c.totalDuration()-(t-c._startTime)*c._timeScale:(t-c._startTime)*c._timeScale,e,r),c=c._prev;c=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,r):n.render((t-n._startTime)*n._timeScale,e,r)}n=o}this._onUpdate&&(e||(i.length&&s(),this._callback("onUpdate"))),l&&(this._locked||this._gc||g!==this._startTime&&y===this._timeScale||(0===this._time||d>=this.totalDuration())&&(a&&(i.length&&s(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[l]&&this._callback(l)))}else m!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},l.getActive=function(t,e,i){null==t&&(t=!0),null==e&&(e=!0),null==i&&(i=!1);var r,n,s=[],a=this.getChildren(t,e,i),o=0,l=a.length;for(r=0;r<l;r++)(n=a[r]).isActive()&&(s[o++]=n);return s},l.getLabelAfter=function(t){t||0!==t&&(t=this._time);var e,i=this.getLabelsArray(),r=i.length;for(e=0;e<r;e++)if(i[e].time>t)return i[e].name;return null},l.getLabelBefore=function(t){null==t&&(t=this._time);for(var e=this.getLabelsArray(),i=e.length;--i>-1;)if(e[i].time<t)return e[i].name;return null},l.getLabelsArray=function(){var t,e=[],i=0;for(t in this._labels)e[i++]={time:this._labels[t],name:t};return e.sort(function(t,e){return t.time-e.time}),e},l.invalidate=function(){return this._locked=!1,n.prototype.invalidate.call(this)},l.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()||0},l.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()||0},l.totalDuration=function(t){return arguments.length?-1!==this._repeat&&t?this.timeScale(this.totalDuration()/t):this:(this._dirty&&(n.prototype.totalDuration.call(this),this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},l.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!=(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},l.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},l.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},l.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},l.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.getLabelBefore(this._time+1e-8)},t},!0);var p=r.i.TimelineMax,d=180/Math.PI,_=[],m=[],g=[],y={},v=r.g._gsDefine.globals,b=function(t,e,i,r){i===r&&(i=r-(r-e)/1e6),t===e&&(e=t+(i-t)/1e6),this.a=t,this.b=e,this.c=i,this.d=r,this.da=r-t,this.ca=i-t,this.ba=e-t},x=function(t,e,i,r){var n={a:t},s={},a={},o={c:r},l=(t+e)/2,h=(e+i)/2,u=(i+r)/2,c=(l+h)/2,f=(h+u)/2,p=(f-c)/8;return n.b=l+(t-l)/4,s.b=c+p,n.c=s.a=(n.b+s.b)/2,s.c=a.a=(c+f)/2,a.b=f-p,o.b=u+(r-u)/4,a.c=o.a=(a.b+o.b)/2,[n,s,a,o]},T=function(t,e,i,r,n){var s,a,o,l,h,u,c,f,p,d,y,v,b,T=t.length-1,w=0,P=t[0].a;for(s=0;s<T;s++)a=(h=t[w]).a,o=h.d,l=t[w+1].d,n?(y=_[s],b=((v=m[s])+y)*e*.25/(r?.5:g[s]||.5),f=o-((u=o-(o-a)*(r?.5*e:0!==y?b/y:0))+(((c=o+(l-o)*(r?.5*e:0!==v?b/v:0))-u)*(3*y/(y+v)+.5)/4||0))):f=o-((u=o-(o-a)*e*.5)+(c=o+(l-o)*e*.5))/2,u+=f,c+=f,h.c=p=u,h.b=0!==s?P:P=h.a+.6*(h.c-h.a),h.da=o-a,h.ca=p-a,h.ba=P-a,i?(d=x(a,P,p,o),t.splice(w,1,d[0],d[1],d[2],d[3]),w+=4):w++,P=c;(h=t[w]).b=P,h.c=P+.4*(h.d-P),h.da=h.d-h.a,h.ca=h.c-h.a,h.ba=P-h.a,i&&(d=x(h.a,P,h.c,h.d),t.splice(w,1,d[0],d[1],d[2],d[3]))},w=function(t,e,i,r){var n,s,a,o,l,h,u=[];if(r)for(s=(t=[r].concat(t)).length;--s>-1;)"string"==typeof(h=t[s][e])&&"="===h.charAt(1)&&(t[s][e]=r[e]+Number(h.charAt(0)+h.substr(2)));if((n=t.length-2)<0)return u[0]=new b(t[0][e],0,0,t[0][e]),u;for(s=0;s<n;s++)a=t[s][e],o=t[s+1][e],u[s]=new b(a,0,0,o),i&&(l=t[s+2][e],_[s]=(_[s]||0)+(o-a)*(o-a),m[s]=(m[s]||0)+(l-o)*(l-o));return u[s]=new b(t[s][e],0,0,t[s+1][e]),u},P=function(t,e,i,r,n,s){var a,o,l,h,u,c,f,p,d={},v=[],b=s||t[0];for(o in n="string"==typeof n?","+n+",":",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",null==e&&(e=1),t[0])v.push(o);if(t.length>1){for(p=t[t.length-1],f=!0,a=v.length;--a>-1;)if(o=v[a],Math.abs(b[o]-p[o])>.05){f=!1;break}f&&(t=t.concat(),s&&t.unshift(s),t.push(t[1]),s=t[t.length-3])}for(_.length=m.length=g.length=0,a=v.length;--a>-1;)o=v[a],y[o]=-1!==n.indexOf(","+o+","),d[o]=w(t,o,y[o],s);for(a=_.length;--a>-1;)_[a]=Math.sqrt(_[a]),m[a]=Math.sqrt(m[a]);if(!r){for(a=v.length;--a>-1;)if(y[o])for(c=(l=d[v[a]]).length-1,h=0;h<c;h++)u=l[h+1].da/m[h]+l[h].da/_[h]||0,g[h]=(g[h]||0)+u*u;for(a=g.length;--a>-1;)g[a]=Math.sqrt(g[a])}for(a=v.length,h=i?4:1;--a>-1;)l=d[o=v[a]],T(l,e,i,r,y[o]),f&&(l.splice(0,h),l.splice(l.length-h,h));return d},S=function(t,e,i){for(var r,n,s,a,o,l,h,u,c,f,p,d=1/i,_=t.length;--_>-1;)for(s=(f=t[_]).a,a=f.d-s,o=f.c-s,l=f.b-s,r=n=0,u=1;u<=i;u++)r=n-(n=((h=d*u)*h*a+3*(c=1-h)*(h*o+c*l))*h),e[p=_*i+u-1]=(e[p]||0)+r*r},C=r.g._gsDefine.plugin({propName:"bezier",priority:-1,version:"1.3.8",API:2,global:!0,init:function(t,e,i){this._target=t,e instanceof Array&&(e={values:e}),this._func={},this._mod={},this._props=[],this._timeRes=null==e.timeResolution?6:parseInt(e.timeResolution,10);var r,n,s,a,o,l=e.values||[],h={},u=l[0],c=e.autoRotate||i.vars.orientToBezier;for(r in this._autoRotate=c?c instanceof Array?c:[["x","y","rotation",!0===c?0:Number(c)||0]]:null,u)this._props.push(r);for(s=this._props.length;--s>-1;)r=this._props[s],this._overwriteProps.push(r),n=this._func[r]="function"==typeof t[r],h[r]=n?t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)]():parseFloat(t[r]),o||h[r]!==l[0][r]&&(o=h);if(this._beziers="cubic"!==e.type&&"quadratic"!==e.type&&"soft"!==e.type?P(l,isNaN(e.curviness)?1:e.curviness,!1,"thruBasic"===e.type,e.correlate,o):function(t,e,i){var r,n,s,a,o,l,h,u,c,f,p,d={},_="cubic"===(e=e||"soft")?3:2,m="soft"===e,g=[];if(m&&i&&(t=[i].concat(t)),null==t||t.length<_+1)throw"invalid Bezier data";for(c in t[0])g.push(c);for(l=g.length;--l>-1;){for(d[c=g[l]]=o=[],f=0,u=t.length,h=0;h<u;h++)r=null==i?t[h][c]:"string"==typeof(p=t[h][c])&&"="===p.charAt(1)?i[c]+Number(p.charAt(0)+p.substr(2)):Number(p),m&&h>1&&h<u-1&&(o[f++]=(r+o[f-2])/2),o[f++]=r;for(u=f-_+1,f=0,h=0;h<u;h+=_)r=o[h],n=o[h+1],s=o[h+2],a=2===_?0:o[h+3],o[f++]=p=3===_?new b(r,n,s,a):new b(r,(2*n+r)/3,(2*n+s)/3,s);o.length=f}return d}(l,e.type,h),this._segCount=this._beziers[r].length,this._timeRes){var f=function(t,e){var i,r,n,s,a=[],o=[],l=0,h=0,u=(e=e>>0||6)-1,c=[],f=[];for(i in t)S(t[i],a,e);for(n=a.length,r=0;r<n;r++)l+=Math.sqrt(a[r]),f[s=r%e]=l,s===u&&(h+=l,c[s=r/e>>0]=f,o[s]=h,l=0,f=[]);return{length:h,lengths:o,segments:c}}(this._beziers,this._timeRes);this._length=f.length,this._lengths=f.lengths,this._segments=f.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(c=this._autoRotate)for(this._initialRotations=[],c[0]instanceof Array||(this._autoRotate=c=[c]),s=c.length;--s>-1;){for(a=0;a<3;a++)r=c[s][a],this._func[r]="function"==typeof t[r]&&t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)];r=c[s][2],this._initialRotations[s]=(this._func[r]?this._func[r].call(this._target):this._target[r])||0,this._overwriteProps.push(r)}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(t){var e,i,r,n,s,a,o,l,h,u,c=this._segCount,f=this._func,p=this._target,_=t!==this._startRatio;if(this._timeRes){if(h=this._lengths,u=this._curSeg,t*=this._length,r=this._li,t>this._l2&&r<c-1){for(l=c-1;r<l&&(this._l2=h[++r])<=t;);this._l1=h[r-1],this._li=r,this._curSeg=u=this._segments[r],this._s2=u[this._s1=this._si=0]}else if(t<this._l1&&r>0){for(;r>0&&(this._l1=h[--r])>=t;);0===r&&t<this._l1?this._l1=0:r++,this._l2=h[r],this._li=r,this._curSeg=u=this._segments[r],this._s1=u[(this._si=u.length-1)-1]||0,this._s2=u[this._si]}if(e=r,t-=this._l1,r=this._si,t>this._s2&&r<u.length-1){for(l=u.length-1;r<l&&(this._s2=u[++r])<=t;);this._s1=u[r-1],this._si=r}else if(t<this._s1&&r>0){for(;r>0&&(this._s1=u[--r])>=t;);0===r&&t<this._s1?this._s1=0:r++,this._s2=u[r],this._si=r}a=(r+(t-this._s1)/(this._s2-this._s1))*this._prec||0}else a=(t-(e=t<0?0:t>=1?c-1:c*t>>0)*(1/c))*c;for(i=1-a,r=this._props.length;--r>-1;)n=this._props[r],o=(a*a*(s=this._beziers[n][e]).da+3*i*(a*s.ca+i*s.ba))*a+s.a,this._mod[n]&&(o=this._mod[n](o,p)),f[n]?p[n](o):p[n]=o;if(this._autoRotate){var m,g,y,v,b,x,T,w=this._autoRotate;for(r=w.length;--r>-1;)n=w[r][2],x=w[r][3]||0,T=!0===w[r][4]?1:d,s=this._beziers[w[r][0]],m=this._beziers[w[r][1]],s&&m&&(s=s[e],m=m[e],g=s.a+(s.b-s.a)*a,g+=((v=s.b+(s.c-s.b)*a)-g)*a,v+=(s.c+(s.d-s.c)*a-v)*a,y=m.a+(m.b-m.a)*a,y+=((b=m.b+(m.c-m.b)*a)-y)*a,b+=(m.c+(m.d-m.c)*a-b)*a,o=_?Math.atan2(b-y,v-g)*T+x:this._initialRotations[r],this._mod[n]&&(o=this._mod[n](o,p)),f[n]?p[n](o):p[n]=o)}}}),O=C.prototype;
/*!
 * VERSION: 1.3.8
 * DATE: 2018-05-30
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/C.bezierThrough=P,C.cubicToQuadratic=x,C._autoCSS=!0,C.quadraticToCubic=function(t,e,i){return new b(t,(2*e+t)/3,(2*e+i)/3,i)},C._cssRegister=function(){var t=v.CSSPlugin;if(t){var e=t._internals,i=e._parseToProxy,r=e._setPluginRatio,n=e.CSSPropTween;e._registerComplexSpecialProp("bezier",{parser:function(t,e,s,a,o,l){e instanceof Array&&(e={values:e}),l=new C;var h,u,c,f=e.values,p=f.length-1,d=[],_={};if(p<0)return o;for(h=0;h<=p;h++)c=i(t,f[h],a,o,l,p!==h),d[h]=c.end;for(u in e)_[u]=e[u];return _.values=d,(o=new n(t,"bezier",0,0,c.pt,2)).data=c,o.plugin=l,o.setRatio=r,0===_.autoRotate&&(_.autoRotate=!0),!_.autoRotate||_.autoRotate instanceof Array||(h=!0===_.autoRotate?0:Number(_.autoRotate),_.autoRotate=null!=c.end.left?[["left","top","rotation",h,!1]]:null!=c.end.x&&[["x","y","rotation",h,!1]]),_.autoRotate&&(a._transform||a._enableTransforms(!1),c.autoRotate=a._target._gsTransform,c.proxy.rotation=c.autoRotate.rotation||0,a._overwriteProps.push("rotation")),l._onInitTween(c.proxy,_,a._tween),o}})}},O._mod=function(t){for(var e,i=this._overwriteProps,r=i.length;--r>-1;)(e=t[i[r]])&&"function"==typeof e&&(this._mod[i[r]]=e)},O._kill=function(t){var e,i,r=this._props;for(e in this._beziers)if(e in t)for(delete this._beziers[e],delete this._func[e],i=r.length;--i>-1;)r[i]===e&&r.splice(i,1);if(r=this._autoRotate)for(i=r.length;--i>-1;)t[r[i][2]]&&r.splice(i,1);return this._super._kill.call(this,t)},
/*!
 * VERSION: 1.16.1
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
r.g._gsDefine("easing.Back",["easing.Ease"],function(){var t,e,i,n,s=r.g.GreenSockGlobals||r.g,a=s.com.greensock,o=2*Math.PI,l=Math.PI/2,h=a._class,u=function(t,e){var i=h("easing."+t,function(){},!0),n=i.prototype=new r.b;return n.constructor=i,n.getRatio=e,i},c=r.b.register||function(){},f=function(t,e,i,r,n){var s=h("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new r},!0);return c(s,t),s},p=function(t,e,i){this.t=t,this.v=e,i&&(this.next=i,i.prev=this,this.c=i.v-e,this.gap=i.t-t)},d=function(t,e){var i=h("easing."+t,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),n=i.prototype=new r.b;return n.constructor=i,n.getRatio=e,n.config=function(t){return new i(t)},i},_=f("Back",d("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),d("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),d("BackInOut",function(t){return(t*=2)<1?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),m=h("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:t>1&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=!0===i},!0),g=m.prototype=new r.b;return g.constructor=m,g.getRatio=function(t){var e=t+(.5-t)*this._p;return t<this._p1?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1===t?0:1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},m.ease=new m(.7,.7),g.config=m.config=function(t,e,i){return new m(t,e,i)},(g=(t=h("easing.SteppedEase",function(t,e){t=t||1,this._p1=1/t,this._p2=t+(e?0:1),this._p3=e?1:0},!0)).prototype=new r.b).constructor=t,g.getRatio=function(t){return t<0?t=0:t>=1&&(t=.999999999),((this._p2*t|0)+this._p3)*this._p1},g.config=t.config=function(e,i){return new t(e,i)},(g=(e=h("easing.ExpoScaleEase",function(t,e,i){this._p1=Math.log(e/t),this._p2=e-t,this._p3=t,this._ease=i},!0)).prototype=new r.b).constructor=e,g.getRatio=function(t){return this._ease&&(t=this._ease.getRatio(t)),(this._p3*Math.exp(this._p1*t)-this._p3)/this._p2},g.config=e.config=function(t,i,r){return new e(t,i,r)},(g=(i=h("easing.RoughEase",function(t){for(var e,i,n,s,a,o,l=(t=t||{}).taper||"none",h=[],u=0,c=0|(t.points||20),f=c,d=!1!==t.randomize,_=!0===t.clamp,m=t.template instanceof r.b?t.template:null,g="number"==typeof t.strength?.4*t.strength:.4;--f>-1;)e=d?Math.random():1/c*f,i=m?m.getRatio(e):e,n="none"===l?g:"out"===l?(s=1-e)*s*g:"in"===l?e*e*g:e<.5?(s=2*e)*s*.5*g:(s=2*(1-e))*s*.5*g,d?i+=Math.random()*n-.5*n:f%2?i+=.5*n:i-=.5*n,_&&(i>1?i=1:i<0&&(i=0)),h[u++]={x:e,y:i};for(h.sort(function(t,e){return t.x-e.x}),o=new p(1,1,null),f=c;--f>-1;)a=h[f],o=new p(a.x,a.y,o);this._prev=new p(0,0,0!==o.t?o:o.next)},!0)).prototype=new r.b).constructor=i,g.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&t<=e.t;)e=e.prev;return this._prev=e,e.v+(t-e.t)/e.gap*e.c},g.config=function(t){return new i(t)},i.ease=new i,f("Bounce",u("BounceOut",function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),u("BounceIn",function(t){return(t=1-t)<1/2.75?1-7.5625*t*t:t<2/2.75?1-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),u("BounceInOut",function(t){var e=t<.5;return(t=e?1-2*t:2*t-1)<1/2.75?t*=7.5625*t:t=t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),f("Circ",u("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),u("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),u("CircInOut",function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),f("Elastic",(n=function(t,e,i){var n=h("easing."+t,function(t,e){this._p1=t>=1?t:1,this._p2=(e||i)/(t<1?t:1),this._p3=this._p2/o*(Math.asin(1/this._p1)||0),this._p2=o/this._p2},!0),s=n.prototype=new r.b;return s.constructor=n,s.getRatio=e,s.config=function(t,e){return new n(t,e)},n})("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*this._p2)+1},.3),n("ElasticIn",function(t){return-this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)},.3),n("ElasticInOut",function(t){return(t*=2)<1?this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)*-.5:this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*this._p2)*.5+1},.45)),f("Expo",u("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),u("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),u("ExpoInOut",function(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),f("Sine",u("SineOut",function(t){return Math.sin(t*l)}),u("SineIn",function(t){return 1-Math.cos(t*l)}),u("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),h("easing.EaseLookup",{find:function(t){return r.b.map[t]}},!0),c(s.SlowMo,"SlowMo","ease,"),c(i,"RoughEase","ease,"),c(t,"SteppedEase","ease,"),_},!0);var k=r.i.Back,R=r.i.Elastic,A=r.i.Bounce,E=r.i.RoughEase,M=r.i.SlowMo,D=r.i.SteppedEase,F=r.i.Circ,z=r.i.Expo,N=r.i.Sine,I=r.i.ExpoScaleEase;s._autoActivated=[n,p,a,o,C,l,f,k,R,A,E,M,D,F,z,N,I],i.d(e,"e",function(){return r.h}),i.d(e,"d",function(){return n}),i.d(e,"b",function(){return r.d}),i.d(e,"a",function(){return r.c}),i.d(e,"c",function(){return N})},function(t,e,i){var r;!function(n){"use strict";var s="function"!=typeof Math.imul||-5!==Math.imul(4294967295,5)?function(t,e){var i=65535&t,r=65535&e;return i*r+((t>>>16&65535)*r+i*(e>>>16&65535)<<16>>>0)|0}:Math.imul,a="function"==typeof String.prototype.repeat&&"xxx"==="x".repeat(3)?function(t,e){return t.repeat(e)}:function(t,e){for(var i="";e>0;)1&e&&(i+=t),e>>=1,t+=t;return i};function o(t){if(!(this instanceof o))return new o(t);if(null==t)t=o.engines.nativeMath;else if("function"!=typeof t)throw new TypeError("Expected engine to be a function, got "+typeof t);this.engine=t}var l=o.prototype;function h(t){return function(){return t}}function u(t,e){return 0===e?t:function(i){return t(i)+e}}function c(t){var e=+t;return e<0?Math.ceil(e):Math.floor(e)}function f(t,e){return t<0?Math.max(t+e,0):Math.min(t,e)}function p(){}o.engines={nativeMath:function(){return 4294967296*Math.random()|0},mt19937:function(t){function e(t){for(var e=0,i=0;(0|e)<227;e=e+1|0)i=2147483648&t[e]|2147483647&t[e+1|0],t[e]=t[e+397|0]^i>>>1^(1&i?2567483615:0);for(;(0|e)<623;e=e+1|0)i=2147483648&t[e]|2147483647&t[e+1|0],t[e]=t[e-227|0]^i>>>1^(1&i?2567483615:0);i=2147483648&t[623]|2147483647&t[0],t[623]=t[396]^i>>>1^(1&i?2567483615:0)}return function(){var i=new t(624),r=0,n=0;function a(){(0|r)>=624&&(e(i),r=0);var t=i[r];return r=r+1|0,n+=1,0|function(t){return t^=t>>>11,t^=t<<7&2636928640,(t^=t<<15&4022730752)^t>>>18}(t)}return a.getUseCount=function(){return n},a.discard=function(t){for(n+=t,(0|r)>=624&&(e(i),r=0);t-r>624;)t-=624-r,e(i),r=0;return r=r+t|0,a},a.seed=function(t){var e=0;i[0]=e=0|t;for(var o=1;o<624;o=o+1|0)i[o]=e=s(e^e>>>30,1812433253)+o|0;return r=624,n=0,a},a.seedWithArray=function(t){return a.seed(19650218),function(t,e){for(var i=1,r=0,n=e.length,a=0|Math.max(n,624),o=0|t[0];(0|a)>0;--a)t[i]=o=(t[i]^s(o^o>>>30,1664525))+(0|e[r])+(0|r)|0,++r,(0|(i=i+1|0))>623&&(t[0]=t[623],i=1),r>=n&&(r=0);for(a=623;(0|a)>0;--a)t[i]=o=(t[i]^s(o^o>>>30,1566083941))-i|0,(0|(i=i+1|0))>623&&(t[0]=t[623],i=1);t[0]=2147483648}(i,t),a},a.autoSeed=function(){return a.seedWithArray(o.generateEntropyArray())},a}}("function"==typeof Int32Array?Int32Array:Array),browserCrypto:"undefined"!=typeof crypto&&"function"==typeof crypto.getRandomValues&&"function"==typeof Int32Array?function(){var t=null,e=128;return function(){return e>=128&&(null===t&&(t=new Int32Array(128)),crypto.getRandomValues(t),e=0),0|t[e++]}}():null},o.generateEntropyArray=function(){for(var t=[],e=o.engines.nativeMath,i=0;i<16;++i)t[i]=0|e();return t.push(0|(new Date).getTime()),t},o.int32=function(t){return 0|t()},l.int32=function(){return o.int32(this.engine)},o.uint32=function(t){return t()>>>0},l.uint32=function(){return o.uint32(this.engine)},o.uint53=function(t){return 4294967296*(2097151&t())+(t()>>>0)},l.uint53=function(){return o.uint53(this.engine)},o.uint53Full=function(t){for(;;){var e=0|t();if(!(2097152&e))return 4294967296*(2097151&e)+(t()>>>0);if(2097152==(4194303&e)&&0==(0|t()))return 9007199254740992}},l.uint53Full=function(){return o.uint53Full(this.engine)},o.int53=function(t){var e=0|t();return 4294967296*(2097151&e)+(t()>>>0)+(2097152&e?-9007199254740992:0)},l.int53=function(){return o.int53(this.engine)},o.int53Full=function(t){for(;;){var e=0|t();if(!(4194304&e))return 4294967296*(2097151&e)+(t()>>>0)+(2097152&e?-9007199254740992:0);if(4194304==(8388607&e)&&0==(0|t()))return 9007199254740992}},l.int53Full=function(){return o.int53Full(this.engine)},o.integer=function(){function t(t){return 0==(t+1&t)}function e(e){return t(e)?function(t){return function(e){return e()&t}}(e):function(t){var e=t+1,i=e*Math.floor(4294967296/e);return function(t){var r=0;do{r=t()>>>0}while(r>=i);return r%e}}(e)}function i(e){var i=e+1;if(function(t){return 0==(0|t)}(i)){var r=(i/4294967296|0)-1;if(t(r))return function(t){return function(e){return 4294967296*(e()&t)+(e()>>>0)}}(r)}return function(t){var e=t*Math.floor(9007199254740992/t);return function(i){var r=0;do{r=4294967296*(2097151&i())+(i()>>>0)}while(r>=e);return r%t}}(i)}function r(t,e){return function(i){var r=0;do{var n=0|i();r=4294967296*(2097151&n)+(i()>>>0)+(2097152&n?-9007199254740992:0)}while(r<t||r>e);return r}}return function(t,n){if(t=Math.floor(t),n=Math.floor(n),t<-9007199254740992||!isFinite(t))throw new RangeError("Expected min to be at least -9007199254740992");if(n>9007199254740992||!isFinite(n))throw new RangeError("Expected max to be at most 9007199254740992");var s=n-t;return s<=0||!isFinite(s)?h(t):4294967295===s?0===t?o.uint32:u(o.int32,t+2147483648):s<4294967295?u(e(s),t):9007199254740991===s?u(o.uint53,t):s<9007199254740991?u(i(s),t):n-1-t==9007199254740991?u(o.uint53Full,t):-9007199254740992===t&&9007199254740992===n?o.int53Full:-9007199254740992===t&&9007199254740991===n?o.int53:-9007199254740991===t&&9007199254740992===n?u(o.int53,1):9007199254740992===n?u(r(t-1,n-1),1):r(t,n)}}(),l.integer=function(t,e){return o.integer(t,e)(this.engine)},o.realZeroToOneInclusive=function(t){return o.uint53Full(t)/9007199254740992},l.realZeroToOneInclusive=function(){return o.realZeroToOneInclusive(this.engine)},o.realZeroToOneExclusive=function(t){return o.uint53(t)/9007199254740992},l.realZeroToOneExclusive=function(){return o.realZeroToOneExclusive(this.engine)},o.real=function(){return function(t,e,i){if(!isFinite(t))throw new RangeError("Expected left to be a finite number");if(!isFinite(e))throw new RangeError("Expected right to be a finite number");return u(function(t,e){return 1===e?t:0===e?function(){return 0}:function(i){return t(i)*e}}(i?o.realZeroToOneInclusive:o.realZeroToOneExclusive,e-t),t)}}(),l.real=function(t,e,i){return o.real(t,e,i)(this.engine)},o.bool=function(){function t(t){return 1==(1&t())}function e(t,e){return function(i){return t(i)<e}}return function(i,r){return null==r?null==i?t:function(t){if(t<=0)return h(!1);if(t>=1)return h(!0);var i=4294967296*t;return i%1==0?e(o.int32,i-2147483648|0):e(o.uint53,Math.round(9007199254740992*t))}(i):i<=0?h(!1):i>=r?h(!0):e(o.integer(0,r-1),i)}}(),l.bool=function(t,e){return o.bool(t,e)(this.engine)},o.pick=function(t,e,i,r){var n=e.length,s=null==i?0:f(c(i),n),a=void 0===r?n:f(c(r),n);if(!(s>=a))return e[o.integer(s,a-1)(t)]},l.pick=function(t,e,i){return o.pick(this.engine,t,e,i)};var d=Array.prototype.slice;o.picker=function(t,e,i){var r=d.call(t,e,i);if(!r.length)return p;var n=o.integer(0,r.length-1);return function(t){return r[n(t)]}},o.shuffle=function(t,e,i){var r=e.length;if(r){null==i&&(i=0);for(var n=r-1>>>0;n>i;--n){var s=o.integer(0,n)(t);if(n!==s){var a=e[n];e[n]=e[s],e[s]=a}}}return e},l.shuffle=function(t){return o.shuffle(this.engine,t)},o.sample=function(t,e,i){if(i<0||i>e.length||!isFinite(i))throw new RangeError("Expected sampleSize to be within 0 and the length of the population");if(0===i)return[];var r=d.call(e),n=r.length;if(n===i)return o.shuffle(t,r,0);var s=n-i;return o.shuffle(t,r,s-1).slice(s)},l.sample=function(t,e){return o.sample(this.engine,t,e)},o.die=function(t){return o.integer(1,t)},l.die=function(t){return o.die(t)(this.engine)},o.dice=function(t,e){var i=o.die(t);return function(t){var r=[];r.length=e;for(var n=0;n<e;++n)r[n]=i(t);return r}},l.dice=function(t,e){return o.dice(t,e)(this.engine)},o.uuid4=function(){function t(t,e){return a("0",e-t.length)+t}return function(e){var i=e()>>>0,r=0|e(),n=0|e(),s=e()>>>0;return t(i.toString(16),8)+"-"+t((65535&r).toString(16),4)+"-"+t((r>>4&4095|16384).toString(16),4)+"-"+t((16383&n|32768).toString(16),4)+"-"+t((n>>4&65535).toString(16),4)+t(s.toString(16),8)}}(),l.uuid4=function(){return o.uuid4(this.engine)},o.string=function(t){null==t&&(t="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-");var e=t.length;if(!e)throw new Error("Expected pool not to be an empty string");var i=o.integer(0,e-1);return function(e,r){for(var n="",s=0;s<r;++s){var a=i(e);n+=t.charAt(a)}return n}},l.string=function(t,e){return o.string(e)(this.engine,t)},o.hex=function(){var t=o.string("0123456789abcdef"),e=o.string("0123456789abcdef".toUpperCase());return function(i){return i?e:t}}(),l.hex=function(t,e){return o.hex(e)(this.engine,t)},o.date=function(t,e){if(!(t instanceof Date))throw new TypeError("Expected start to be a Date, got "+typeof t);if(!(e instanceof Date))throw new TypeError("Expected end to be a Date, got "+typeof e);var i=o.integer(t.getTime(),e.getTime());return function(t){return new Date(i(t))}},l.date=function(t,e){return o.date(t,e)(this.engine)},void 0===(r=function(){return o}.call(e,i,e,t))||(t.exports=r)}()},function(t,e,i){"use strict";var r=i(1);e.a=Polymer.dedupingMixin(function(t){return function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.c(e,t),e.prototype.readCSSCustomProperty=function(t,e){return("ShadyCSS"in window?window.ShadyCSS.getComputedStyleValue(this,t):getComputedStyle(this,t))||e},e}(t)})},,,,,,,,,,,,,,,,,,,,,,,function(t,e,i){i(28),i(29),i(30),i(31),i(32),i(33),i(34),i(39),i(37),t.exports=i(38)},function(t,e,i){"use strict";i.r(e);var r=i(1),n=i(4);const s=window.svgjs;window.addEventListener("load",()=>{var t;const{customElement:e,property:i}=Polymer.decorators;let a=t=class extends(Object(n.a)(Polymer.Element)){constructor(){super(...arguments),this.glow=!0}static createArrowBlock({height:e,bodyWidth:i,chevronWidth:r,fillColor:n,fillOpacity:a,strokeSize:o,strokeColor:l}){const h=new s.Polygon,u=t.createArrowBlockPointArray({height:e,bodyWidth:i,chevronWidth:r});return h.plot(u),h.fill({color:n,opacity:a}),o>0&&h.stroke({width:o,color:l}),h}static createArrowBlockPointArray({height:t,bodyWidth:e,chevronWidth:i}){return new s.PointArray([[0,0],[i+e,0],[2*i+e,t/2],[i+e,t],[0,t],[i,t/2]])}ready(){super.ready(),this.svgDoc=s(this.shadowRoot)}render({useContentWidth:e=!0}={}){this.svgDoc.clear(),this.svgDoc.size(0,0);const i=parseInt(this.readCSSCustomProperty("--atom-arrow-block-stroke-size",t.DEFAULT_STROKE_SIZE),10),r=parseInt(this.readCSSCustomProperty("--atom-arrow-block-chevron-width",t.DEFAULT_CHEVRON_WIDTH),10),n=parseFloat(this.readCSSCustomProperty("--atom-arrow-block-shadow-size",t.DEFAULT_SHADOW_SIZE)),s=parseFloat(this.readCSSCustomProperty("--atom-arrow-block-fill-opacity",1)),a=e?this.$.content.clientWidth:this.getBoundingClientRect().width-2*r-i,o=this.clientHeight,l=a+2*r+i,h=t.createArrowBlock({height:o-i,bodyWidth:a,chevronWidth:r,fillColor:this.readCSSCustomProperty("--atom-arrow-block-fill-color"),fillOpacity:s,strokeSize:i,strokeColor:this.readCSSCustomProperty("--atom-arrow-block-stroke-color")});let u=i/2;this.glow?(h.attr({filter:"url(#glowFilter)"}),this.svgDoc.node.appendChild(this.$.filterDefs),this.svgDoc.node.style.marginRight=`${2*-n}px`,this.svgDoc.transform({x:-n,y:-n}),u=i/2+n,this.svgDoc.size(l+2*n,o+2*n)):this.svgDoc.size(l,o),this.$.filterHolder.remove(),h.move(u,u),this.arrowBlock=h,this.svgDoc.add(h)}};r.b([i({type:Boolean})],a.prototype,"glow",void 0),a=t=r.b([e("atom-arrow-block")],a),window.AtomArrowBlock=a})},function(t,e,i){"use strict";i.r(e);var r=i(1);window.addEventListener("load",()=>{var t;const{customElement:e,property:i}=Polymer.decorators;let n=t=class extends Polymer.Element{constructor(){super(...arguments),this.pulsating=!1,this.randomized=!1}ready(){super.ready();const t=Array.from(this.shadowRoot.querySelectorAll(".cell"));["hourOnes","minuteTens","minuteOnes","secondTens","secondOnes","millisecondHundredths"].forEach((e,i)=>{const r=4*i;this[`_$${e}Cells`]=t.slice(r,r+4)})}startRandomFlashing(){if(!window.__SCREENSHOT_TESTING__)return this._randomFlashingInterval?this._randomFlashingInterval:(this._randomFlashingInterval=window.setInterval(()=>{this.flashRandomCell()},100),this._randomFlashingInterval)}stopRandomFlashing(){Array.from(this.shadowRoot.querySelectorAll(".cell--flash")).forEach(t=>t.classList.remove("cell--flash")),clearInterval(this._randomFlashingInterval),this._randomFlashingInterval=void 0}flashRandomCell(){const t=Array.from(this.shadowRoot.querySelectorAll(".cell:not(.cell--flash)"));if(0===t.length)return;const e=Random.pick(Random.engines.browserCrypto,t);e.classList.add("cell--flash"),setTimeout(()=>{e.classList.remove("cell--flash","cell--on")},450)}_updateHours(){this._setColumn(s(this.hours,1),this._$hourOnesCells)}_updateMinutes(){this._setColumn(s(this.minutes,10),this._$minuteTensCells),this._setColumn(s(this.minutes,1),this._$minuteOnesCells)}_updateSeconds(){this._setColumn(s(this.seconds,10),this._$secondTensCells),this._setColumn(s(this.seconds,1),this._$secondOnesCells)}_updateMilliseconds(){this._setColumn(s(this.milliseconds,100),this._$millisecondHundredthsCells)}_randomizedChanged(t){t?this.startRandomFlashing():this.stopRandomFlashing()}_setColumn(t,e){t.toString(2).padStart(4,"0").split("").forEach((t,i)=>{const r="1"===t;e[i].classList.toggle("cell--on",r)})}};function s(t,e){if("number"!=typeof e)throw new Error("must provide a place and it must be a number");return 1===e?t%10:Math.floor(t/e)}r.b([i({type:Number,observer:t.prototype._updateHours})],n.prototype,"hours",void 0),r.b([i({type:Number,observer:t.prototype._updateMinutes})],n.prototype,"minutes",void 0),r.b([i({type:Number,observer:t.prototype._updateSeconds})],n.prototype,"seconds",void 0),r.b([i({type:Number,observer:t.prototype._updateSeconds})],n.prototype,"milliseconds",void 0),r.b([i({type:Boolean,reflectToAttribute:!0})],n.prototype,"pulsating",void 0),r.b([i({type:Boolean,reflectToAttribute:!0,observer:t.prototype._randomizedChanged})],n.prototype,"randomized",void 0),n=t=r.b([e("atom-arrow-block")],n),window.AtomBinaryClock=n})},function(t,e,i){"use strict";i.r(e);var r=i(1),n=i(4);const s=window.svgjs;window.addEventListener("load",()=>{var t;const{customElement:e,property:i}=Polymer.decorators;let a=t=class extends(Object(n.a)(Polymer.Element)){constructor(){super(...arguments),this.direction="right",this.noAutoRender=!1}static createChevron({width:e,height:i,thickness:r,fillColor:n,strokeSize:a,strokeColor:o}){const l=new s.Polygon,h=t.createChevronPointArray({width:e,height:i,thickness:r});return l.plot(h),l.fill(n),a>0&&l.stroke({width:a,color:o}),l}static createChevronPointArray({width:t,height:e,thickness:i}){return new s.PointArray([[0,0],[i,0],[t,e/2],[i,e],[0,e],[t-i,e/2]])}ready(){super.ready(),this.svgDoc=s(this.shadowRoot)}connectedCallback(){super.connectedCallback(),this.noAutoRender||("complete"===document.readyState?Polymer.RenderStatus.afterNextRender(this,this.render):window.addEventListener("load",()=>{Polymer.RenderStatus.afterNextRender(this,this.render)}))}render(e,i){this.svgDoc.clear(),e="number"==typeof e?e:this.scrollWidth,i="number"==typeof i?i:this.clientHeight;const r=parseInt(this.readCSSCustomProperty("--atom-chevron-stroke-size",t.DEFAULT_STROKE_SIZE),10),n=parseInt(this.readCSSCustomProperty("--atom-chevron-thickness",t.DEFAULT_THICKNESS),10);this.svgDoc.size(e,i);const s=t.createChevron({width:e-r,height:i-r,thickness:n,fillColor:this.readCSSCustomProperty("--atom-chevron-fill-color"),strokeSize:r,strokeColor:this.readCSSCustomProperty("--atom-chevron-stroke-color")});s.move(r/2,r/2),this.chevron=s,this.svgDoc.add(s),"left"===this.direction&&"left"!==this._lastDirection&&(this.svgDoc.transform({scaleX:-1}),this._lastDirection="left")}};r.b([i({type:String,reflectToAttribute:!0})],a.prototype,"direction",void 0),r.b([i({type:Boolean})],a.prototype,"noAutoRender",void 0),a=t=r.b([e("atom-chevron")],a),window.AtomChevron=a})},function(t,e,i){"use strict";i.r(e);var r=i(1);window.addEventListener("load",()=>{const{customElement:t,property:e}=Polymer.decorators;let i=class extends Polymer.Element{ready(){super.ready(),this.shadowRoot.querySelectorAll("sc-fitted-text").forEach(t=>{t.$.fittedContent.style.webkitBackgroundClip="text"})}};r.b([e({type:String})],i.prototype,"text",void 0),r.b([e({type:String,reflectToAttribute:!0})],i.prototype,"align",void 0),r.b([e({type:Number})],i.prototype,"maxWidth",void 0),i=r.b([t("atom-gradient-text")],i),window.AtromGradientText=i})},function(t,e,i){"use strict";i.r(e);var r=i(1);window.addEventListener("load",()=>{const{customElement:t,property:e}=Polymer.decorators;let i=class extends Polymer.Element{constructor(){super(...arguments),this.align="left"}};r.b([e({type:String,reflectToAttribute:!0})],i.prototype,"align",void 0),i=r.b([t("atom-greeble")],i),window.AtomGreeble=i})},function(t,e,i){"use strict";i.r(e);var r=i(1);window.addEventListener("load",()=>{const{customElement:t}=Polymer.decorators;let e=class extends Polymer.Element{};e=r.b([t("atom-gridlines")],e),window.AtomGridlines=e})},function(t,e,i){"use strict";i.r(e);var r=i(1),n=i(2),s=i(3);const a=window.svgjs;window.addEventListener("load",()=>{const{customElement:t,property:e}=Polymer.decorators;let i=class extends Polymer.Element{constructor(){super(...arguments),this.strokeSize=0,this.withBackground=!1,this.cellSize=21,this.cellStagger=.002,this.preserveAspectRatio="xMidYMid",this.entering=!1,this.exiting=!1,this._initialized=!1}ready(){super.ready(),Polymer.RenderStatus.beforeNextRender(this,()=>{this._initSVG(),n.e.set(this.$svg.imageMaskCells,{opacity:0})})}enter(){const t=new n.d,e=s.shuffle(s.engines.browserCrypto,this.$svg.imageMaskCells.slice(0));let i;return t.staggerTo(e,.224,{opacity:1,ease:n.c.easeInOut,onStart:()=>{i||(i=!0,this.entering=!0)}},this.cellStagger,0,()=>{this.entering=!1,this.dispatchEvent(new CustomEvent("entered"))}),t}exit({onComplete:t=(()=>{})}={}){const e=new n.d,i=s.shuffle(s.engines.browserCrypto,this.$svg.imageMaskCells.slice(0));let r=!1;return e.staggerTo(i,.224,{opacity:0,ease:n.c.easeInOut,onStart:()=>{r||(r=!0,this.exiting=!0)}},this.cellStagger,0,()=>{"function"==typeof t&&t(),this.exiting=!1,this.dispatchEvent(new CustomEvent("exited"))}),e}_initSVG(){if(this._initialized)throw new Error("this element has already been initialized");this._initialized=!0,this.$svg={};const t=this.strokeSize,e=this.clientWidth,i=this.clientHeight,r=this.cellSize,n=Math.ceil(i/r),s=Math.ceil(e/r),o=a(this),l=o.mask(),h=o.image(this.fallbackSrc);if(this.$svg.svgDoc=o,this.$svg.image=h,this.$svg.imageMaskCells=[],h.attr({preserveAspectRatio:this.preserveAspectRatio}),this.withBackground){const e=o.rect();e.fill({color:"black",opacity:.25}),this.$svg.bgRect=e,t>0&&(e.stroke({color:"white",width:2*t}),h.move(t,t))}for(let t=0;t<n;t++){const e=t*r;for(let t=0;t<s;t++){const i=t*r,n=o.rect(r,r);n.move(i,e),n.fill({color:"#FFFFFF"}),l.add(n),this.$svg.imageMaskCells.push(n)}}h.front(),h.maskWith(l),this.resize()}resize(){if(!this._initialized)return;const t=this.strokeSize,e=this.clientWidth,i=this.clientHeight;this.$svg.svgDoc.size(e,i),this.$svg.image.size(e,i),this.withBackground&&(this.$svg.bgRect.size(e,i),t>0&&(this.$svg.bgRect.transform({scaleX:-1,x:e}),this.$svg.image.size(e-2*t,i-2*t)))}};r.b([e({type:Number})],i.prototype,"strokeSize",void 0),r.b([e({type:Boolean})],i.prototype,"withBackground",void 0),r.b([e({type:Number})],i.prototype,"cellSize",void 0),r.b([e({type:Number})],i.prototype,"cellStagger",void 0),r.b([e({type:String})],i.prototype,"fallbackSrc",void 0),r.b([e({type:String})],i.prototype,"preserveAspectRatio",void 0),r.b([e({type:Boolean,notify:!0})],i.prototype,"entering",void 0),r.b([e({type:Boolean,notify:!0})],i.prototype,"exiting",void 0),r.b([e({type:Boolean})],i.prototype,"_initialized",void 0),i=r.b([t("atom-gridmask-image")],i),window.AtomGridmaskImage=i})},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e){var i;i=function(){return this}();try{i=i||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){"use strict";i.r(e),e.default=Polymer.dedupingMixin(t=>{return class extends t{readCSSCustomProperty(t,e){let i;return(i="ShadyCSS"in window?window.ShadyCSS.getComputedStyleValue(this,t):getComputedStyle(this,t))||e}}})},function(t,e,i){"use strict";i.r(e);var r=i(1),n=i(2);const{property:s}=Polymer.decorators,a={};e.default=Polymer.dedupingMixin(t=>{class e extends t{constructor(){super(...arguments),this.timeline=new n.d({autoRemoveChildren:!0}),this.itemDisplayDuration=9,this.canExtend=!1}ready(){super.ready(),this.bindToMessage&&this.bindToMessage.length>0&&"false"!==this.bindToMessage&&nodecg.listenFor(this.bindToMessage,this.playItem.bind(this))}playItem(t){const e=this.timeline;if(!t)return e;let i;if((i=Array.isArray(this.companionElement)?this.companionElement:[this.companionElement]).filter(t=>t&&"function"==typeof t.hide),this.canExtend){const i=new n.d;i.add(this._createChangeAnim(t)),i.add(this._createHold()),e.add(i,"exit-=0.01"),e.shiftChildren(i.duration(),!0,e.getLabelTime("exit"))}else{if(this._addReset(),e.call(()=>{if(this._setCanExtend(!0),i.length<=0)return;e.pause(null,!1);const t=new n.d;i.forEach(e=>{t.add(e.hide(),0)}),t.call(()=>{e.resume(null,!1)})},void 0,null,"+=0.03"),i.length>0&&e.addPause(),e.add(this._createEntranceAnim(t),"+=0.03"),window.__SCREENSHOT_TESTING__)return e;e.add(this._createHold()),e.addLabel("exit","+=0");const r=new n.d({onStart:()=>{this._setCanExtend(!1)}});r.add(this._createExitAnim()),e.add(r),i.length>0&&(e.addLabel("companionEnter","+=0"),i.forEach(t=>{e.add(t.show(),"companionEnter")})),e.to(a,.1,a)}return e}_createHold(){const t=new n.d;return t.to(a,this.itemDisplayDuration,a),t}_canExtendChanged(t){t&&this.dispatchEvent(new CustomEvent("can-extend"))}}return r.b([s({type:Object})],e.prototype,"companionElement",void 0),r.b([s({type:Object})],e.prototype,"timeline",void 0),r.b([s({type:String})],e.prototype,"bindToMessage",void 0),r.b([s({type:Number})],e.prototype,"itemDisplayDuration",void 0),r.b([s({type:Boolean,notify:!0,observer:e.prototype._canExtendChanged,readOnly:!0})],e.prototype,"canExtend",void 0),e})},function(t,e,i){"use strict";i.r(e);var r=i(1),n=i(2),s=Polymer.decorators.property,a={},o=Polymer.dedupingMixin(function(t){return function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.timeline=new n.d({autoRemoveChildren:!0}),e.itemDisplayDuration=9,e.canExtend=!1,e}return r.c(e,t),e.prototype.ready=function(){t.prototype.ready.call(this),this.bindToMessage&&this.bindToMessage.length>0&&"false"!==this.bindToMessage&&nodecg.listenFor(this.bindToMessage,this.playItem.bind(this))},e.prototype.playItem=function(t){var e,i=this,r=this.timeline;if(!t)return r;if((e=Array.isArray(this.companionElement)?this.companionElement:[this.companionElement]).filter(function(t){return t&&"function"==typeof t.hide}),this.canExtend){var s=new n.d;s.add(this._createChangeAnim(t)),s.add(this._createHold()),r.add(s,"exit-=0.01"),r.shiftChildren(s.duration(),!0,r.getLabelTime("exit"))}else{if(this._addReset(),r.call(function(){if(i._setCanExtend(!0),!(e.length<=0)){r.pause(null,!1);var t=new n.d;e.forEach(function(e){t.add(e.hide(),0)}),t.call(function(){r.resume(null,!1)})}},void 0,null,"+=0.03"),e.length>0&&r.addPause(),r.add(this._createEntranceAnim(t),"+=0.03"),window.__SCREENSHOT_TESTING__)return r;r.add(this._createHold()),r.addLabel("exit","+=0");var o=new n.d({onStart:function(){i._setCanExtend(!1)}});o.add(this._createExitAnim()),r.add(o),e.length>0&&(r.addLabel("companionEnter","+=0"),e.forEach(function(t){r.add(t.show(),"companionEnter")})),r.to(a,.1,a)}return r},e.prototype._createHold=function(){var t=new n.d;return t.to(a,this.itemDisplayDuration,a),t},e.prototype._canExtendChanged=function(t){t&&this.dispatchEvent(new CustomEvent("can-extend"))},r.b([s({type:Object})],e.prototype,"companionElement"),r.b([s({type:Object})],e.prototype,"timeline"),r.b([s({type:String})],e.prototype,"bindToMessage"),r.b([s({type:Number})],e.prototype,"itemDisplayDuration"),r.b([s({type:Boolean,notify:!0,observer:e.prototype._canExtendChanged,readOnly:!0})],e.prototype,"canExtend"),e}(t)}),l=i(0);
/*!
 * VERSION: 0.6.1
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * SplitText is a Club GreenSock membership benefit; You must have a valid membership to use
 * this code without violating the terms of use. Visit http://greensock.com/club/ to sign up or get more details.
 * This work is subject to the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */
!function(t){var e=t.GreenSockGlobals||t,i=function(t){var i,r=t.split("."),n=e;for(i=0;i<r.length;i++)n[r[i]]=n=n[r[i]]||{};return n}("com.greensock.utils"),r=function(t){var e=t.nodeType,i="";if(1===e||9===e||11===e){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=r(t)}else if(3===e||4===e)return t.nodeValue;return i},n=document,s=n.defaultView?n.defaultView.getComputedStyle:function(){},a=/([A-Z])/g,o=function(t,e,i,r){var n;return(i=i||s(t,null))?n=(t=i.getPropertyValue(e.replace(a,"-$1").toLowerCase()))||i.length?t:i[e]:t.currentStyle&&(n=(i=t.currentStyle)[e]),r?n:parseInt(n,10)||0},l=function(t){return!!(t.length&&t[0]&&(t[0].nodeType&&t[0].style&&!t.nodeType||t[0].length&&t[0][0]))},h=function(t,e){for(var i,r=e.length;--r>-1;)if(i=e[r],t.substr(0,i.length)===i)return i.length},u=/(?:\r|\n|\t\t)/g,c=/(?:\s\s+)/g,f=function(t){return(t.charCodeAt(0)-55296<<10)+(t.charCodeAt(1)-56320)+65536},p=" style='position:relative;display:inline-block;"+(n.all&&!n.addEventListener?"*display:inline;*zoom:1;'":"'"),d=function(t,e){var i=-1!==(t=t||"").indexOf("++"),r=1;return i&&(t=t.split("++").join("")),function(){return"<"+e+p+(t?" class='"+t+(i?r++:"")+"'>":">")}},_=i.SplitText=e.SplitText=function(t,e){if("string"==typeof t&&(t=_.selector(t)),!t)throw"cannot split a null element.";this.elements=l(t)?function(t){var e,i,r,n=[],s=t.length;for(e=0;e<s;e++)if(i=t[e],l(i))for(r=i.length,r=0;r<i.length;r++)n.push(i[r]);else n.push(i);return n}(t):[t],this.chars=[],this.words=[],this.lines=[],this._originals=[],this.vars=e||{},this.split(e)},m=function(t,e,i){var r=t.nodeType;if(1===r||9===r||11===r)for(t=t.firstChild;t;t=t.nextSibling)m(t,e,i);else 3!==r&&4!==r||(t.nodeValue=t.nodeValue.split(e).join(i))},g=function(t,e){for(var i=e.length;--i>-1;)t.push(e[i])},y=function(t){var e,i=[],r=t.length;for(e=0;e!==r;i.push(t[e++]));return i},v=function(t,e,i){for(var r;t&&t!==e;){if(r=t._next||t.nextSibling)return r.textContent.charAt(0)===i;t=t.parentNode||t._parent}return!1},b=function(t){var e,i,r=y(t.childNodes),n=r.length;for(e=0;e<n;e++)(i=r[e])._isSplit?b(i):(e&&3===i.previousSibling.nodeType?i.previousSibling.nodeValue+=3===i.nodeType?i.nodeValue:i.firstChild.nodeValue:3!==i.nodeType&&t.insertBefore(i.firstChild,i),t.removeChild(i))},x=function(t,e,i,r,a,l,h){var u,c,f,p,d,_,y,x,T,w,P,S,C=s(t),O=o(t,"paddingLeft",C),k=-999,R=o(t,"borderBottomWidth",C)+o(t,"borderTopWidth",C),A=o(t,"borderLeftWidth",C)+o(t,"borderRightWidth",C),E=o(t,"paddingTop",C)+o(t,"paddingBottom",C),M=o(t,"paddingLeft",C)+o(t,"paddingRight",C),D=.2*o(t,"fontSize"),F=o(t,"textAlign",C,!0),z=[],N=[],I=[],L=e.wordDelimiter||" ",B=e.span?"span":"div",X=e.type||e.split||"chars,words,lines",j=a&&-1!==X.indexOf("lines")?[]:null,$=-1!==X.indexOf("words"),V=-1!==X.indexOf("chars"),Y="absolute"===e.position||!0===e.absolute,W=e.linesClass,H=-1!==(W||"").indexOf("++"),U=[];for(H&&(W=W.split("++").join("")),f=(c=t.getElementsByTagName("*")).length,d=[],u=0;u<f;u++)d[u]=c[u];if(j||Y)for(u=0;u<f;u++)((_=(p=d[u]).parentNode===t)||Y||V&&!$)&&(S=p.offsetTop,j&&_&&Math.abs(S-k)>D&&("BR"!==p.nodeName||0===u)&&(y=[],j.push(y),k=S),Y&&(p._x=p.offsetLeft,p._y=S,p._w=p.offsetWidth,p._h=p.offsetHeight),j&&((p._isSplit&&_||!V&&_||$&&_||!$&&p.parentNode.parentNode===t&&!p.parentNode._isSplit)&&(y.push(p),p._x-=O,v(p,t,L)&&(p._wordEnd=!0)),"BR"===p.nodeName&&(p.nextSibling&&"BR"===p.nextSibling.nodeName||0===u)&&j.push([])));for(u=0;u<f;u++)_=(p=d[u]).parentNode===t,"BR"!==p.nodeName?(Y&&(T=p.style,$||_||(p._x+=p.parentNode._x,p._y+=p.parentNode._y),T.left=p._x+"px",T.top=p._y+"px",T.position="absolute",T.display="block",T.width=p._w+1+"px",T.height=p._h+"px"),!$&&V?p._isSplit?(p._next=p.nextSibling,p.parentNode.appendChild(p)):p.parentNode._isSplit?(p._parent=p.parentNode,!p.previousSibling&&p.firstChild&&(p.firstChild._isFirst=!0),p.nextSibling&&" "===p.nextSibling.textContent&&!p.nextSibling.nextSibling&&U.push(p.nextSibling),p._next=p.nextSibling&&p.nextSibling._isFirst?null:p.nextSibling,p.parentNode.removeChild(p),d.splice(u--,1),f--):_||(S=!p.nextSibling&&v(p.parentNode,t,L),p.parentNode._parent&&p.parentNode._parent.appendChild(p),S&&p.parentNode.appendChild(n.createTextNode(" ")),e.span&&(p.style.display="inline"),z.push(p)):p.parentNode._isSplit&&!p._isSplit&&""!==p.innerHTML?N.push(p):V&&!p._isSplit&&(e.span&&(p.style.display="inline"),z.push(p))):j||Y?(p.parentNode&&p.parentNode.removeChild(p),d.splice(u--,1),f--):$||t.appendChild(p);for(u=U.length;--u>-1;)U[u].parentNode.removeChild(U[u]);if(j){for(Y&&(w=n.createElement(B),t.appendChild(w),P=w.offsetWidth+"px",S=w.offsetParent===t?0:t.offsetLeft,t.removeChild(w)),T=t.style.cssText,t.style.cssText="display:none;";t.firstChild;)t.removeChild(t.firstChild);for(x=" "===L&&(!Y||!$&&!V),u=0;u<j.length;u++){for(y=j[u],(w=n.createElement(B)).style.cssText="display:block;text-align:"+F+";position:"+(Y?"absolute;":"relative;"),W&&(w.className=W+(H?u+1:"")),I.push(w),f=y.length,c=0;c<f;c++)"BR"!==y[c].nodeName&&(p=y[c],w.appendChild(p),x&&p._wordEnd&&w.appendChild(n.createTextNode(" ")),Y&&(0===c&&(w.style.top=p._y+"px",w.style.left=O+S+"px"),p.style.top="0px",S&&(p.style.left=p._x-S+"px")));0===f?w.innerHTML="&nbsp;":$||V||(b(w),m(w,String.fromCharCode(160)," ")),Y&&(w.style.width=P,w.style.height=p._h+"px"),t.appendChild(w)}t.style.cssText=T}Y&&(h>t.clientHeight&&(t.style.height=h-E+"px",t.clientHeight<h&&(t.style.height=h+R+"px")),l>t.clientWidth&&(t.style.width=l-M+"px",t.clientWidth<l&&(t.style.width=l+A+"px"))),g(i,z),g(r,N),g(a,I)},T=function(t,e,i,s){var a,l,p=y(t.childNodes),d=p.length,_="absolute"===e.position||!0===e.absolute;if(3!==t.nodeType||d>1){for(e.absolute=!1,a=0;a<d;a++)(3!==(l=p[a]).nodeType||/\S+/.test(l.nodeValue))&&(_&&3!==l.nodeType&&"inline"===o(l,"display",null,!0)&&(l.style.display="inline-block",l.style.position="relative"),l._isSplit=!0,T(l,e,i,s));return e.absolute=_,void(t._isSplit=!0)}!function(t,e,i,s){var a,o,l,p,d,_,g,y,v,b,x=e.span?"span":"div",T=-1!==(e.type||e.split||"chars,words,lines").indexOf("chars"),w="absolute"===e.position||!0===e.absolute,P=e.wordDelimiter||" ",S=" "!==P?"":w?"&#173; ":" ",C=e.span?"</span>":"</div>",O=!0,k=e.specialChars?"function"==typeof e.specialChars?e.specialChars:h:null,R=n.createElement("div"),A=t.parentNode;for(A.insertBefore(R,t),R.textContent=t.nodeValue,A.removeChild(t),g=-1!==(a=r(t=R)).indexOf("<"),!1!==e.reduceWhiteSpace&&(a=a.replace(c," ").replace(u,"")),g&&(a=a.split("<").join("{{LT}}")),d=a.length,o=(" "===a.charAt(0)?S:"")+i(),l=0;l<d;l++)if(_=a.charAt(l),k&&(b=k(a.substr(l),e.specialChars)))_=a.substr(l,b||1),o+=T&&" "!==_?s()+_+"</"+x+">":_,l+=b-1;else if(_===P&&a.charAt(l-1)!==P&&l){for(o+=O?C:"",O=!1;a.charAt(l+1)===P;)o+=S,l++;l===d-1?o+=S:")"!==a.charAt(l+1)&&(o+=S+i(),O=!0)}else"{"===_&&"{{LT}}"===a.substr(l,6)?(o+=T?s()+"{{LT}}</"+x+">":"{{LT}}",l+=5):_.charCodeAt(0)>=55296&&_.charCodeAt(0)<=56319||a.charCodeAt(l+1)>=65024&&a.charCodeAt(l+1)<=65039?(y=f(a.substr(l,2)),v=f(a.substr(l+2,2)),p=y>=127462&&y<=127487&&v>=127462&&v<=127487||v>=127995&&v<=127999?4:2,o+=T&&" "!==_?s()+a.substr(l,p)+"</"+x+">":a.substr(l,p),l+=p-1):o+=T&&" "!==_?s()+_+"</"+x+">":_;t.outerHTML=o+(O?C:""),g&&m(A,"{{LT}}","<")}(t,e,i,s)},w=_.prototype;w.split=function(t){this.isSplit&&this.revert(),this.vars=t=t||this.vars,this._originals.length=this.chars.length=this.words.length=this.lines.length=0;for(var e,i,r,n=this.elements.length,s=t.span?"span":"div",a=d(t.wordsClass,s),o=d(t.charsClass,s);--n>-1;)r=this.elements[n],this._originals[n]=r.innerHTML,e=r.clientHeight,i=r.clientWidth,T(r,t,a,o),x(r,t,this.chars,this.words,this.lines,i,e);return this.chars.reverse(),this.words.reverse(),this.lines.reverse(),this.isSplit=!0,this},w.revert=function(){if(!this._originals)throw"revert() call wasn't scoped properly.";for(var t=this._originals.length;--t>-1;)this.elements[t].innerHTML=this._originals[t];return this.chars=[],this.words=[],this.lines=[],this.isSplit=!1,this},_.selector=t.$||t.jQuery||function(e){var i=t.$||t.jQuery;return i?(_.selector=i,i(e)):"undefined"==typeof document?e:document.querySelectorAll?document.querySelectorAll(e):document.getElementById("#"===e.charAt(0)?e.substr(1):e)},_.version="0.6.1"}(l.g);var h=l.i.SplitText;window._gsapPlugins=[h];var u={},c=new WeakMap;function f(t,e){var i=void 0===e?{}:e,r=i.splitType,s=void 0===r?"chars,words":r,a=i.typeInterval,o=void 0===a?.03:a,l=new n.d,f=new h(t,{type:s,charsClass:"character",linesClass:"line"});switch(c.set(t,{split:f}),s){case"chars":l.staggerFromTo(f.chars,.001,{visibility:"hidden"},{visibility:"visible"},o);break;case"chars,words":case"chars,words,lines":f.words.forEach(function(t){l.staggerFromTo(t.children,.001,{visibility:"hidden"},{visibility:"visible"},o),l.to(u,o,u)});break;default:throw new Error('Unexpected splitType "'+s+'"')}return l}function p(t,e){void 0===e&&(e=.03);var i=new n.d;if(!c.has(t))return i;var r=c.get(t).split;return r.words?r.words.forEach(function(t){i.staggerTo(t.children,.001,{visibility:"hidden"},e),i.to(u,e,u)}):i.staggerFrom(r.chars,.001,{visibility:"hidden"},e),i}var d=i(3);function _(t){var e=t.probability,i=t.normalValue,r=t.minValue,n=void 0===r?0:r,s=t.maxValue,a=void 0===s?1:s;if(e>0&&d.real(0,1,!0)(d.engines.browserCrypto)<=e)return d.real(n,a,!0)(d.engines.browserCrypto);return i}const m=window.svgjs;window.addEventListener("load",()=>{const{customElement:t,property:e}=Polymer.decorators;let i=class extends(o(Polymer.Element)){constructor(){super(...arguments),this.label="",this.companionElement=document.querySelector("gdq-sponsors"),this.bindToMessage="showTweet",this.backgroundOpacity=.25}ready(){super.ready(),this._initBackgroundSVG(),this._addReset(),Polymer.RenderStatus.beforeNextRender(this,()=>{const t=document.querySelector("layout-app");if(!this.companionElement&&t){const e=t.shadowRoot.querySelector("gdq-sponsors");e&&(this.companionElement=e)}})}_addReset(){const t=this.timeline;t.call(()=>{this.$["body-actual"].innerHTML="",this.$.name.innerHTML=""},void 0,null,"+=0.03"),t.set(this.$svg.bgRect.node,{drawSVG:"0%","fill-opacity":0}),t.set([this.$.label,this.$.name],{scaleX:0,color:"transparent",clipPath:""}),t.set(this.$["body-actual"],{opacity:1})}_createEntranceAnim(t){const e=new n.d;return e.addLabel("start","+=0.03"),e.call(()=>{this.$.name.innerText=`@${t.user.screen_name}`},void 0,null,"start"),e.to(this.$svg.bgRect.node,.75,{drawSVG:"100%",ease:n.a.easeNone},"start"),e.to(this.$.name,.334,{scaleX:1,ease:n.c.easeInOut,onComplete:()=>{this.$.name.style.color="",f(this.$.name)}},"start+=0.05"),e.to(this.$.label,.334,{scaleX:1,ease:n.c.easeInOut,onComplete:()=>{this.$.label.style.color="",f(this.$.label)}},"start+=0.4"),e.to(this.$svg.bgRect.node,.5,{"fill-opacity":this.backgroundOpacity,ease:n.c.easeOut},"start+=1"),e.call(()=>{this.$["body-actual"].innerHTML=t.text,f(this.$["body-actual"],{typeInterval:.01})}),e}_createChangeAnim(t){const e=new n.d;let i=!1;return e.call(()=>{if(i)return;e.pause();const t=new n.d;t.add(p(this.$.name,.01),0),t.add(p(this.$["body-actual"],.01),.08),t.call(()=>{i=!0,e.resume()})},void 0,null,"+=0.03"),e.call(()=>{this.$.name.innerText=`@${t.user.screen_name}`,this.$["body-actual"].innerHTML=t.text;const e=new n.d;e.add(f(this.$.name,{typeInterval:.01}),0),e.add(f(this.$["body-actual"],{typeInterval:.01}),.08)},void 0,null,"+=0.03"),e}_createExitAnim(){const t=new n.d;return t.add("exit"),t.add(function(t){var e=t.target,i=t.propName,s=t.duration,a=t.ease,o=void 0===a?n.a.easeNone:a,l=t.delay,h=void 0===l?0:l,u=t.start,c=t.end,f=t.onUpdate,p=r.a({},u),d=r.a({ease:o,delay:h},c);return Array.isArray(e)?d.onUpdate=function(){var t=_(p);e.forEach(function(e){e[i]=t}),f&&f(t)}:d.onUpdate=function(){var t=_(p);e[i]=t,f&&f(t)},n.e.to(p,s,d)}({target:this.$["body-actual"].style,propName:"opacity",duration:.465,start:{probability:1,normalValue:1},end:{probability:0,normalValue:0}}),"exit"),t.to(this.$svg.bgRect.node,.5,{"fill-opacity":0,ease:n.c.easeOut},"exit"),t.to(this.$svg.bgRect.node,1.5,{drawSVG:"0%",ease:n.b.easeIn},"exit"),t.fromTo(this.$.label,.334,{clipPath:"inset(0 0% 0 0)"},{clipPath:"inset(0 100% 0 0)",ease:n.c.easeInOut},"exit+=0.9"),t.fromTo(this.$.name,.334,{clipPath:"inset(0 0 0 0%)"},{clipPath:"inset(0 0 0 100%)",ease:n.c.easeInOut},"exit+=1.3"),t}_initBackgroundSVG(){if(this._initialized)throw new Error("this element has already been initialized");this._initialized=!0;this.$svg={};const t=m(this.$.background),e=t.rect();this.$svg.svgDoc=t,this.$svg.bgRect=e,e.stroke({color:"white",width:2}),e.fill({color:"black",opacity:this.backgroundOpacity}),this.resize()}resize(){if(!this._initialized)return;const t=this.$.background.clientWidth,e=this.$.background.clientHeight;this.$svg.svgDoc.size(t,e),this.$svg.bgRect.size(e,t),this.$svg.bgRect.style({transform:`rotate(90deg) translateY(${-t}px)`})}_falsey(t){return!t}};r.b([e({type:String})],i.prototype,"label",void 0),r.b([e({type:Object})],i.prototype,"companionElement",void 0),r.b([e({type:String})],i.prototype,"bindToMessage",void 0),r.b([e({type:Number})],i.prototype,"backgroundOpacity",void 0),i=r.b([t("gdq-tweet")],i),window.GdqTweet=i})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,