import * as tslib_1 from "/bundles/gdqx18-layouts/node_modules/tslib/tslib.es6.js";
import { Power1, TimelineMax, TweenLite } from "/bundles/gdqx18-layouts/node_modules/gsap/index.js";
const {
  customElement,
  property
} = Polymer.decorators;
const NAME_FADE_IN_EASE = Power1.easeOut;
const NAME_FADE_OUT_EASE = Power1.easeIn;
let AtomNameplate = class AtomNameplate extends Polymer.Element {
  constructor() {
    super(...arguments);
    this.noLeftCap = false;
    this.noRightCap = false;
    this.name = '';
    this.twitch = '';
    /**
     * How long, in seconds, to fade names in/out.
     *
     * For example, a value of 0.33 means that the fade out will take 0.33
     * seconds, and then the subsequent fade in will take another 0.33 seconds.
     */

    this.nameFadeDuration = 0.33;
    this._nameTL = new TimelineMax({
      repeat: -1,
      paused: true
    });
  }

  ready() {
    super.ready(); // Workaround for: https://bugs.chromium.org/p/chromium/issues/detail?id=844880

    this.shadowRoot.querySelectorAll('sc-fitted-text').forEach(node => {
      node.$.fittedContent.style.webkitBackgroundClip = 'text';
    }); // Create looping anim for main nameplate.

    this._nameTL.to(this.$.names, this.nameFadeDuration, {
      onStart: () => {
        this.$.namesTwitch.classList.remove('hidden');
        this.$.namesName.classList.add('hidden');
      },
      opacity: 1,
      ease: NAME_FADE_IN_EASE
    });

    this._nameTL.to(this.$.names, this.nameFadeDuration, {
      opacity: 0,
      ease: NAME_FADE_OUT_EASE
    }, '+=10');

    this._nameTL.to(this.$.names, this.nameFadeDuration, {
      onStart: () => {
        this.$.namesTwitch.classList.add('hidden');
        this.$.namesName.classList.remove('hidden');
      },
      opacity: 1,
      ease: NAME_FADE_IN_EASE
    });

    this._nameTL.to(this.$.names, this.nameFadeDuration, {
      opacity: 0,
      ease: NAME_FADE_OUT_EASE
    }, '+=80');
  }

  updateName({
    alias = '?',
    twitchAlias = '?',
    rotate = true
  } = {}) {
    const doTheDangThing = () => {
      this.name = alias;
      this.twitch = twitchAlias;
      this.$.namesName.classList.add('hidden');
      this.$.namesTwitch.classList.remove('hidden');

      if (!this.twitch) {
        this._nameTL.pause();

        this.$.namesName.classList.remove('hidden');
        this.$.namesTwitch.classList.add('hidden');
        TweenLite.to(this.$.names, this.nameFadeDuration, {
          opacity: 1,
          ease: NAME_FADE_IN_EASE
        });
      } else if (rotate) {
        this._nameTL.restart();
      } else {
        this._nameTL.pause();

        TweenLite.to(this.$.names, this.nameFadeDuration, {
          opacity: 1,
          ease: NAME_FADE_IN_EASE
        });
      }

      Polymer.RenderStatus.afterNextRender(this, this.fitName);
    };

    if (window.__SCREENSHOT_TESTING__) {
      doTheDangThing();
      return;
    }

    TweenLite.to(this.$.names, this.nameFadeDuration, {
      opacity: 0,
      ease: NAME_FADE_OUT_EASE,
      callbackScope: this,
      onComplete: doTheDangThing
    });
  }

  fitName() {
    Polymer.flush();
    const MAX_NAME_WIDTH = this.$.names.clientWidth - 32;
    const MAX_TWITCH_WIDTH = MAX_NAME_WIDTH - 20;
    const twitchText = this.$.namesTwitch.querySelector('sc-fitted-text');
    this.$.namesName.maxWidth = MAX_NAME_WIDTH;
    twitchText.maxWidth = MAX_TWITCH_WIDTH;
  }

};

tslib_1.__decorate([property({
  type: Boolean,
  reflectToAttribute: true
})], AtomNameplate.prototype, "noLeftCap", void 0);

tslib_1.__decorate([property({
  type: Boolean,
  reflectToAttribute: true
})], AtomNameplate.prototype, "noRightCap", void 0);

tslib_1.__decorate([property({
  type: String
})], AtomNameplate.prototype, "name", void 0);

tslib_1.__decorate([property({
  type: String
})], AtomNameplate.prototype, "twitch", void 0);

tslib_1.__decorate([property({
  type: Number
})], AtomNameplate.prototype, "nameFadeDuration", void 0);

tslib_1.__decorate([property({
  type: Object
})], AtomNameplate.prototype, "_nameTL", void 0);

AtomNameplate = tslib_1.__decorate([customElement('atom-nameplate')], AtomNameplate);
export default AtomNameplate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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