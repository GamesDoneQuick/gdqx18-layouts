!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([,function(e,t,n){"use strict";n.d(t,"c",function(){return r}),n.d(t,"a",function(){return s}),n.d(t,"b",function(){return i});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function r(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var s=function(){return(s=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};function i(e,t,n,o){var r,s=arguments.length,i=s<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(i=(s<3?r(i):s>3?r(t,n,i):r(t,n))||i);return s>3&&i&&Object.defineProperty(t,n,i),i}},,,,function(e,t,n){n(6),n(7),n(8),n(9),n(10),n(11),n(12),n(13),n(14),n(15),n(16),n(17),n(18),n(19),n(20),n(21),n(22),n(23),n(24),n(25),e.exports=n(26)},function(e,t,n){"use strict";n.r(t);var o=n(1);window.addEventListener("load",()=>{const{customElement:e,property:t,observe:n}=Polymer.decorators,r=nodecg.Replicant("checklist"),s=nodecg.Replicant("stopwatch"),i=nodecg.Replicant("obs:cyclingRecordings");let a=class extends Polymer.Element{ready(){super.ready(),r.on("change",e=>{if(!e)return;const t=[];for(const n in e){if(!{}.hasOwnProperty.call(e,n))continue;e[n].forEach(e=>{e.complete||t.push(e)})}this.warning=t.length>1&&"Cycle Recordings"!==t[0].name}),s.on("change",e=>{e&&(this._stopwatchState="running"===e.state)}),i.on("change",e=>{this._cyclingRecordings=e}),nodecg.listenFor("obs:recordingsCycled",e=>{const t=this.$.toast;if(e){let n=e;e.message?n=e.message:e.error&&(n=e.error),t.showErrorToast("Failed to cycle recordings: "+n)}else t.showSuccessToast("Recordings cycled.")}),this.addEventListener("click",()=>{this.$.checkbox.click()})}_calcDisabled(e,t){this.disabled=Boolean(e||t)}_calcContextPage(e,t,n){return n?"cycling":t?"disabled":e?"warning":"all-clear"}};o.b([t({type:String})],a.prototype,"name",void 0),o.b([t({type:String})],a.prototype,"category",void 0),o.b([t({type:Boolean,notify:!0,reflectToAttribute:!0})],a.prototype,"checked",void 0),o.b([t({type:Boolean,reflectToAttribute:!0})],a.prototype,"warning",void 0),o.b([t({type:Boolean,reflectToAttribute:!0})],a.prototype,"disabled",void 0),o.b([t({type:Boolean})],a.prototype,"_stopwatchState",void 0),o.b([t({type:Boolean})],a.prototype,"_cyclingRecordings",void 0),o.b([n("_stopwatchState","_cyclingRecordings")],a.prototype,"_calcDisabled",null),a=o.b([e("gdq-checklist-recording")],a),window.GdqChecklistRecording=a})},function(e,t,n){"use strict";n.r(t);var o=n(1);window.addEventListener("load",()=>{const{customElement:e,property:t}=Polymer.decorators,n=nodecg.Replicant("checklist");let r=class extends(Polymer.MutableData(Polymer.Element)){ready(){super.ready(),n.on("change",e=>{if(!e)return;this.extraContent=e.extraContent,this.techStationDuties=e.techStationDuties,this.stageTechDuties=e.stageTechDuties,this.audioReady=e.audioEngineerDuties.every(e=>e.complete);const t=e.special.find(e=>"Cycle Recordings"===e.name);t&&(this.recordingsCycled=t.complete)}),this._checkboxChanged=this._checkboxChanged.bind(this),this.addEventListener("change",this._checkboxChanged)}_checkboxChanged(e){const t=e.composedPath()[0],o=t.getAttribute("category"),r=t.hasAttribute("name")?t.getAttribute("name"):t.innerText.trim();o&&n.value[o].find(e=>e.name===r&&(e.complete=Boolean(t.checked),!0))}};o.b([t({type:Array})],r.prototype,"stageTechDuties",void 0),o.b([t({type:Array})],r.prototype,"extraContent",void 0),o.b([t({type:Array})],r.prototype,"techStationDuties",void 0),o.b([t({type:Boolean})],r.prototype,"audioReady",void 0),o.b([t({type:Boolean})],r.prototype,"recordingsCycled",void 0),r=o.b([e("gdq-checklist")],r),window.GdqChecklist=r})},function(e,t,n){"use strict";n.r(t);var o=n(1);window.addEventListener("load",()=>{const{customElement:e}=Polymer.decorators,t=nodecg.Replicant("countdownRunning"),n=nodecg.Replicant("countdown");let r=class extends Polymer.Element{ready(){super.ready(),n.on("change",e=>{if(e){this.$.timeInput.setMS(e.minutes,e.seconds)}}),t.on("change",e=>{e?(this.$.countdownContainer.setAttribute("disabled","true"),this.$.start.setAttribute("disabled-running","true"),this.$.stop.removeAttribute("disabled")):(this.$.countdownContainer.removeAttribute("disabled"),this.$.start.removeAttribute("disabled-running"),this.$.stop.setAttribute("disabled","true")),this.checkStartButton()})}start(){nodecg.sendMessage("startCountdown",this.$.timeInput.value)}stop(){nodecg.sendMessage("stopCountdown")}_handleTimeInvalidChanged(e){e.detail&&e.detail.value?this.$.start.setAttribute("disabled-invalid","true"):this.$.start.removeAttribute("disabled-invalid"),this.checkStartButton()}checkStartButton(){this.$.start.hasAttribute("disabled-invalid")||this.$.start.hasAttribute("disabled-running")?this.$.start.setAttribute("disabled","true"):this.$.start.removeAttribute("disabled")}};r=o.b([e("gdq-countdown")],r),window.GdqCountdown=r})},function(e,t,n){"use strict";n.r(t);var o=n(1);window.addEventListener("load",()=>{const{customElement:e,property:t}=Polymer.decorators;let n=class extends(Polymer.MutableData(Polymer.Element)){preview(){this.dispatchEvent(new CustomEvent("preview"))}accept(){nodecg.sendMessage("acceptFanart",this.value)}reject(){nodecg.sendMessage("rejectTweet",this.value.id_str)}_calcIndicatorHidden(e){return!e||!Array.isArray(e)||e.length<=1}};o.b([t({type:Object})],n.prototype,"value",void 0),n=o.b([e("fanart-item")],n),window.FanartItem=n})},function(e,t,n){"use strict";n.r(t);var o=n(1);window.addEventListener("load",()=>{const{customElement:e,property:t}=Polymer.decorators;let n=class extends Polymer.Element{constructor(){super(...arguments),this.opened=!1,this._currentImageIndex=0}ready(){super.ready(),this.addEventListener("click",e=>{e.composedPath()[0]===this&&this.close()})}open(e){this.opened=!0,this._currentImageIndex=0,this._tweet=e,document.body.style.overflow="hidden"}close(){this.opened=!1,document.body.style.overflow=""}previous(){this._currentImageIndex<=0?this._currentImageIndex=0:this._currentImageIndex--}next(){if(!this._tweet||!this._tweetHasMedia(this._tweet))return;const e=this._tweet.gdqMedia;if(!e)return;const t=e.length-1;this._currentImageIndex>=t?this._currentImageIndex=t:this._currentImageIndex++}_calcImageSrc(e,t){if(!this._tweetHasMedia(e))return;const n=e.gdqMedia;return n?n[t].media_url_https:void 0}_tweetHasMedia(e){return e&&e.gdqMedia}_calcPreviousDisabled(e){return e<=0}_calcNextDisabled(e,t){if(!e||!this._tweetHasMedia(e))return!0;const n=this._tweet.gdqMedia;return n?t>=n.length-1:void 0}};o.b([t({type:Boolean,reflectToAttribute:!0})],n.prototype,"opened",void 0),o.b([t({type:Object})],n.prototype,"_tweet",void 0),o.b([t({type:Number})],n.prototype,"_currentImageIndex",void 0),n=o.b([e("gdq-fanart-preview")],n),window.GdqFanartPreview=n})},function(e,t,n){"use strict";n.r(t);var o=n(1);window.addEventListener("load",()=>{const{customElement:e,property:t}=Polymer.decorators,n=nodecg.Replicant("gdq:currentLayout"),r=nodecg.Replicant("fanartTweets");let s=class extends(Polymer.MutableData(Polymer.Element)){ready(){super.ready(),n.on("change",e=>{const t=this.$.cover;switch(e){case"break":t.style.display="none";break;default:t.style.display="flex"}}),r.on("change",e=>{e&&(this.$.empty.style.display=e.length>0?"none":"flex",this.tweets=e)})}_sortTweets(e,t){return new Date(t.created_at)-new Date(e.created_at)}_handlePreviewEvent(e){this.$.previewDialog.open(e.model.tweet)}};o.b([t({type:Array})],s.prototype,"tweets",void 0),s=o.b([e("gdq-fanart")],s),window.GdqFanart=s})},function(e,t,n){"use strict";n.r(t);var o=n(1);window.addEventListener("load",()=>{const{customElement:e,property:t}=Polymer.decorators,n=nodecg.Replicant("scores");let r=class extends Polymer.Element{ready(){super.ready(),n.on("change",e=>{e&&(this.scores=e)})}_scoreInputChanged(e){if(!n.value||!e.target)return;const t=e.target,o=parseInt(String(t.getAttribute("data-team-index")),10),r=parseInt(String(t.value),10);"number"!=typeof r||isNaN(r)||(n.value[o]=r)}};o.b([t({type:Object})],r.prototype,"scores",void 0),r=o.b([e("gdq-marioscores")],r),window.GdqMarioScores=r})},function(e,t,n){"use strict";n.r(t);var o=n(1);window.addEventListener("load",()=>{const{customElement:e}=Polymer.decorators,t=nodecg.Replicant("autoUploadRecordings"),n=nodecg.Replicant("recordTrackerEnabled");let r=class extends Polymer.Element{ready(){super.ready(),Polymer.RenderStatus.beforeNextRender(this,()=>{n.on("change",e=>{e&&(this.$.milestoneToggle.checked=e)}),t.on("change",e=>{this.$.uploadToggle.checked=e}),this._checkUploadToggleDisable()})}_checkUploadToggleDisable(){nodecg.bundleConfig.youtubeUploadScriptPath?this.$.uploadToggle.removeAttribute("disabled"):this.$.uploadToggle.setAttribute("disabled","true")}_handleMiletoneTrackerToggleChange(e){e.target&&(n.value=Boolean(e.target.checked))}_handleUploadToggleChange(e){e.target&&(t.value=Boolean(e.target.checked))}};r=o.b([e("gdq-misc-toggles")],r),window.GdqMiscToggles=r})},function(e,t,n){"use strict";n.r(t);var o=n(1);window.addEventListener("load",()=>{const{customElement:e,property:t}=Polymer.decorators;let n=class extends(Polymer.MutableData(Polymer.Element)){constructor(){super(...arguments),this.showingOriginal=!1}loadRun(e){this.name=e.name,this.category=e.category,this.estimate=e.estimate,this.console=e.console,this.releaseYear=String(e.releaseYear),this.runners=e.runners.map(e=>{if(e)return{name:e.name,stream:e.stream}}),this.coop=e.coop,this.originalValues=e.originalValues,this.pk=e.pk}applyChanges(){const e=[],t=this.$.runners.querySelectorAll('paper-input[label^="Runner"]:not([disabled])'),n=this.$.runners.querySelectorAll('paper-input[label="Twitch Channel"]:not([disabled])');for(let o=0;o<4;o++)(t[o].value||n[o].value)&&(e[o]={name:t[o].value,stream:n[o].value});nodecg.sendMessage("modifyRun",{name:this.name,category:this.category,estimate:this.estimate,console:this.console,releaseYear:this.releaseYear,coop:this.coop,runners:e,pk:this.pk},()=>{const e=this.closest("paper-dialog");e&&e.close()})}resetRun(){nodecg.sendMessage("resetRun",this.pk,()=>{const e=this.closest("paper-dialog");e&&e.close()})}calcHide(e,t){const n=e.split(".").slice(0);n.unshift("originalValues");const o=this.get(n);return t&&void 0!==o}showOriginal(){this.showingOriginal=!0}hideOriginal(){this.showingOriginal=!1}_moveRunnerDown(e){const t=e.target;if(!t)return;const n=t.closest("[data-index]");if(!n)return;const o=parseInt(String(n.getAttribute("data-index")),10);this.runners=this._moveRunner(this.runners,o,"down")}_moveRunnerUp(e){const t=e.target;if(!t)return;const n=t.closest("[data-index]");if(!n)return;const o=parseInt(String(n.getAttribute("data-index")),10);this.runners=this._moveRunner(this.runners,o,"up")}_moveRunner(e,t,n){if(isNaN(t))throw new Error(`Index must be a number, got "${t}" which is a "${typeof t}"`);if(t<0||t>=4)throw new Error(`Index must be >= 0 and < 4, got "${t}"`);const o=e.slice(0);for(;o.length<4;)o.push(void 0);const r=o.splice(t,1)[0];return o.splice(t+("up"===n?-1:1),0,r),o.slice(0,4)}};o.b([t({type:Boolean})],n.prototype,"showingOriginal",void 0),o.b([t({type:Boolean})],n.prototype,"coop",void 0),o.b([t({type:String})],n.prototype,"releaseYear",void 0),o.b([t({type:String})],n.prototype,"console",void 0),o.b([t({type:String})],n.prototype,"estimate",void 0),o.b([t({type:String})],n.prototype,"category",void 0),o.b([t({type:String})],n.prototype,"name",void 0),o.b([t({type:Object})],n.prototype,"originalValues",void 0),o.b([t({type:Array})],n.prototype,"runners",void 0),o.b([t({type:Number})],n.prototype,"pk",void 0),n=o.b([e("gdq-run-editor")],n),window.GdqRunEditor=n})},function(e,t,n){"use strict";n.r(t);var o=n(1);window.addEventListener("load",()=>{var e;const{customElement:t,property:n}=Polymer.decorators;let r=e=class extends Polymer.Element{_notesChanged(e){const t=this.$.notes.querySelector(".value");t.innerHTML=e?e.replace(/\r\n/g,"<br/>").replace(/\n/g,"<br/>"):""}setRun(e){this.name=e.name,this.console=e.console,this.runners=e.runners,this.releaseYear=String(e.releaseYear),this.estimate=e.estimate,this.category=e.category,this.order=e.order,this.notes=e.notes,this.coop=e.coop,this.originalValues=e.originalValues}calcName(e){return e?e.split("\\n").join(" "):e}calcModified(e){return void 0===e||null===e?"":"modified"}};o.b([n({type:String,observer:e.prototype._notesChanged})],r.prototype,"notes",void 0),o.b([n({type:String,reflectToAttribute:!0})],r.prototype,"label",void 0),o.b([n({type:Boolean})],r.prototype,"coop",void 0),o.b([n({type:String})],r.prototype,"releaseYear",void 0),o.b([n({type:String})],r.prototype,"console",void 0),o.b([n({type:String})],r.prototype,"estimate",void 0),o.b([n({type:String})],r.prototype,"category",void 0),o.b([n({type:String})],r.prototype,"name",void 0),o.b([n({type:Object})],r.prototype,"originalValues",void 0),o.b([n({type:Array})],r.prototype,"runners",void 0),o.b([n({type:Number})],r.prototype,"order",void 0),r=e=o.b([t("gdq-schedule-runinfo")],r),window.GdqScheduleRuninfo=r})},function(e,t,n){"use strict";n.r(t);var o=n(1);window.addEventListener("load",()=>{const{customElement:e,property:t}=Polymer.decorators,n=nodecg.Replicant("canSeekSchedule"),r=nodecg.Replicant("currentRun"),s=nodecg.Replicant("nextRun"),i=nodecg.Replicant("schedule");let a=class extends Polymer.Element{ready(){super.ready(),n.on("change",()=>{this._checkButtons()}),i.on("change",e=>{e&&(this.$.typeahead.items=e.filter(e=>"run"===e.type).map(e=>e.name),this._checkButtons())}),s.on("change",e=>{if(!e)return;const t=this.$.nextRun;e?(t.setRun(e),this.$.editNext.removeAttribute("disabled")):(t.setRun({}),this.$.editNext.setAttribute("disabled","true")),this._checkButtons()}),Polymer.RenderStatus.beforeNextRender(this,()=>{r.on("change",e=>{if(!e)return;this.$.currentRun.setRun(e),this._checkButtons()})})}takeTypeahead(){const e=this.$.typeahead;if(!e.value||!i.value)return;const t=e.value;i.value.some(n=>"run"===n.type&&(n.name.toLowerCase()===t.toLowerCase()&&(this._pendingSetCurrentRunByOrderMessageResponse=!0,this._checkButtons(),nodecg.sendMessage("setCurrentRunByOrder",n.order,()=>{this._pendingSetCurrentRunByOrderMessageResponse=!1,e.value="",e._suggestions=[],this._checkButtons()}),!0)))||this.$.toast.show(`Could not find speedrun with name "${t}".`)}fetchLatestSchedule(){const e=this.$.toast;this.$.fetchLatestSchedule.setAttribute("disabled","true"),nodecg.sendMessage("updateSchedule",(t,n)=>{if(this.$.fetchLatestSchedule.removeAttribute("disabled"),t)return nodecg.log.warn(t.message),void e.show("Error updating schedule. Check console.");n?(nodecg.log.info("Schedule successfully updated"),e.show("Successfully updated schedule.")):(nodecg.log.info("Schedule unchanged, not updated"),e.show("Schedule unchanged, not updated."))})}next(){this._pendingNextRunMessageResponse=!0,this._checkButtons(),nodecg.sendMessage("nextRun",()=>{this._pendingNextRunMessageResponse=!1,this._checkButtons()})}previous(){this._pendingPreviousRunMessageResponse=!0,this._checkButtons(),nodecg.sendMessage("previousRun",()=>{this._pendingPreviousRunMessageResponse=!1,this._checkButtons()})}editCurrent(){if(!r.value)return;const e=this.$.editor,t=this.$.editDialog;e.title=`Edit Current Run (#${r.value.order})`,e.loadRun(r.value),t.open()}editNext(){if(!s.value)return;const e=this.$.editor,t=this.$.editDialog;e.title=`Edit Next Run (#${s.value.order})`,e.loadRun(s.value),t.open()}_checkButtons(){if("declared"!==n.status||"declared"!==i.status||"declared"!==r.status||"declared"!==s.status||!i.value)return;let e=!1,t=!1,o=!1;if((!n.value||this._pendingSetCurrentRunByOrderMessageResponse||this._pendingPreviousRunMessageResponse||this._pendingNextRunMessageResponse)&&(e=!0,t=!0,o=!0),s.value||(e=!0),r.value){i.value.find(e=>!("run"!==e.type||!r.value)&&e.order<r.value.order)||(t=!0)}else t=!0;this.$.typeahead.value||(o=!0),e?this.$.next.setAttribute("disabled","true"):this.$.next.removeAttribute("disabled"),t?this.$.previous.setAttribute("disabled","true"):this.$.previous.removeAttribute("disabled"),o?this.$.take.setAttribute("disabled","true"):this.$.take.removeAttribute("disabled")}_typeaheadKeyup(e){13===e.which&&this.$.typeahead.inputValue&&this.takeTypeahead()}};o.b([t({type:Boolean})],a.prototype,"_pendingSetCurrentRunByOrderMessageResponse",void 0),o.b([t({type:Boolean})],a.prototype,"_pendingNextRunMessageResponse",void 0),o.b([t({type:Boolean})],a.prototype,"_pendingPreviousRunMessageResponse",void 0),a=o.b([e("gdq-schedule")],a),window.GdqSchedule=a})},function(e,t,n){"use strict";n.r(t);var o=n(1);window.addEventListener("load",()=>{const{customElement:e,property:t}=Polymer.decorators;let n=class extends Polymer.Element{calcRunnerStatus(e){return e[0]?e[0].time.formatted:"Running"}calcRunnerStatusClass(e){return e[0]&&!e[0].forfeit?"finished":""}calcFinishHidden(e){return e[0]&&!e[0].forfeit}calcResumeHidden(e){return!e[0]}calcForfeitHidden(e){return e[0]&&e[0].forfeit}calcEditDisabled(e){return!e[0]}finish(){nodecg.sendMessage("completeRunner",{index:this.index,forfeit:!1})}forfeit(){nodecg.sendMessage("completeRunner",{index:this.index,forfeit:!0})}resume(){nodecg.sendMessage("resumeRunner",this.index)}editTime(){this.dispatchEvent(new CustomEvent("edit-time",{bubbles:!0,composed:!0}))}calcConcatenatedRunners(e){let t=e[0].name;return e.length>1&&(t=e.slice(1).reduce((e,t,n,o)=>t&&t.name?n===o.length-1?`${e} & ${t.name}`:`${e}, ${t.name}`:e,t)),t}};o.b([t({type:String})],n.prototype,"importPath",void 0),o.b([t({type:Number})],n.prototype,"index",void 0),o.b([t({type:Array})],n.prototype,"runners",void 0),o.b([t({type:Array})],n.prototype,"results",void 0),n=o.b([e("gdq-timekeeper-coop")],n),window.GdqTimekeeperCoop=n})},function(e,t,n){"use strict";n.r(t);var o=n(1);window.addEventListener("load",()=>{const{customElement:e,property:t}=Polymer.decorators;let n=class extends Polymer.Element{calcRunnerStatus(e,t){if(e)return e[t]&&e[t].time?e[t].time.formatted:"Running"}calcRunnerStatusClass(e,t){if(e)return e[t]&&!e[t].forfeit?"finished":""}calcFinishHidden(e,t){if(e)return e[t]&&!e[t].forfeit}calcResumeHidden(e,t){if(e)return!e[t]}calcForfeitHidden(e,t){if(e)return e[t]&&e[t].forfeit}calcEditDisabled(e,t){if(e)return!e[t]}finish(){nodecg.sendMessage("completeRunner",{index:this.index,forfeit:!1})}forfeit(){nodecg.sendMessage("completeRunner",{index:this.index,forfeit:!0})}resume(){nodecg.sendMessage("resumeRunner",this.index)}editTime(){this.dispatchEvent(new CustomEvent("edit-time",{bubbles:!0,composed:!0}))}};o.b([t({type:String})],n.prototype,"importPath",void 0),o.b([t({type:Number})],n.prototype,"index",void 0),o.b([t({type:Object})],n.prototype,"runner",void 0),o.b([t({type:Array})],n.prototype,"results",void 0),n=o.b([e("gdq-timekeeper-runner")],n),window.GdqTimekeeperRunner=n})},function(e,t,n){"use strict";n.r(t);var o=n(1);window.addEventListener("load",()=>{const{customElement:e,property:t}=Polymer.decorators,n=nodecg.Replicant("stopwatch"),r=nodecg.Replicant("currentRun"),s=nodecg.Replicant("checklistComplete");let i=class extends Polymer.Element{constructor(){super(...arguments),this.checklistIncomplete=!0}ready(){super.ready(),n.on("change",this.stopwatchChanged.bind(this)),r.on("change",e=>{if(!e)return;const t=e.runners.slice(0);t.length=4;for(let e=0;e<4;e++)t[e]=t[e]||!1;this.runners=t,this.coop=e.coop}),s.on("change",e=>{this.checklistIncomplete=!e})}stopwatchChanged(e){e&&(this.state=e.state,this.time=e.time.formatted,this.results=e.results.slice(0),this.notStarted="not_started"===e.state,this.paused="paused"===e.state)}confirmReset(){this.$.resetDialog.open()}startTimer(){nodecg.sendMessage("startTimer")}stopTimer(){nodecg.sendMessage("stopTimer")}resetTimer(){nodecg.sendMessage("resetTimer")}calcStartDisabled(e,t){return e||"running"===t||"finished"===t}calcStartText(e){switch(e){case"paused":return"Resume";default:return"Start"}}calcPauseDisabled(e){return"running"!==e}editMasterTime(){this.$["editDialog-text"].textContent="Enter a new master time.",this.$.editDialog.setAttribute("data-index","master"),this.$["editDialog-input"].value=this.time,this.$.editDialog.open()}saveEditedTime(){const e=this.$["editDialog-input"];nodecg.sendMessage("editTime",{index:this.$.editDialog.getAttribute("data-index"),newTime:e.value}),e.value=""}editRunnerTime(e){const t=e.model;this.$["editDialog-text"].innerHTML=`Enter a new final time for <b>${t.runner.name}.</b>`,this.$.editDialog.setAttribute("data-index",t.index);const n=this.results[t.index];n&&(this.$["editDialog-input"].value=n.time.formatted,this.$.editDialog.open())}editCoopTime(){this.$["editDialog-text"].innerHTML="Enter a new final time for <b>all runners.</b>",this.$.editDialog.setAttribute("data-index","0");const e=this.results[0];e&&(this.$["editDialog-input"].value=e.time.formatted,this.$.editDialog.open())}};o.b([t({type:Boolean,reflectToAttribute:!0})],i.prototype,"checklistIncomplete",void 0),o.b([t({type:String,reflectToAttribute:!0})],i.prototype,"state",void 0),o.b([t({type:Boolean,reflectToAttribute:!0})],i.prototype,"paused",void 0),o.b([t({type:Array})],i.prototype,"results",void 0),o.b([t({type:Boolean})],i.prototype,"coop",void 0),o.b([t({type:Boolean})],i.prototype,"notStarted",void 0),o.b([t({type:Array})],i.prototype,"runners",void 0),o.b([t({type:String})],i.prototype,"time",void 0),i=o.b([e("gdq-timekeeper")],i),window.GdqTimekeeper=i})},function(e,t,n){"use strict";n.r(t);var o=n(1);window.addEventListener("load",()=>{const{customElement:e,property:t}=Polymer.decorators;let n=class extends Polymer.Element{constructor(){super(...arguments),this.value="?"}edit(){this.dispatchEvent(new CustomEvent("edit",{bubbles:!0,composed:!0}))}equal(e,t){return e===t}};o.b([t({type:String})],n.prototype,"value",void 0),o.b([t({type:String})],n.prototype,"currency",void 0),n=o.b([e("gdq-totals-total")],n),window.GdqTotalsTotal=n})},function(e,t,n){"use strict";n.r(t);var o=n(1);window.addEventListener("load",()=>{const{customElement:e,property:t}=Polymer.decorators,n=nodecg.Replicant("total"),r=nodecg.Replicant("autoUpdateTotal");let s=class extends Polymer.Element{constructor(){super(...arguments),this.cashTotal="?",this.bitsTotal="?"}ready(){super.ready(),n.on("change",e=>{this.cashTotal=e.formatted}),r.on("change",e=>{this.autoUpdateTotal=e})}editCashTotal(){n.value&&(this.$.editTotalInput.value=String(n.value.raw),this._editTarget="cash",this.$.editDialog.open())}_handleAutoUpdateToggleChange(e){e.target&&(r.value=Boolean(e.target.checked))}_handleEditDialogConfirmed(){nodecg.sendMessage("setTotal",{type:this._editTarget,newValue:parseFloat(String(this.$.editTotalInput.value))})}};o.b([t({type:String})],s.prototype,"cashTotal",void 0),o.b([t({type:String})],s.prototype,"bitsTotal",void 0),o.b([t({type:Boolean})],s.prototype,"autoUpdateTotal",void 0),o.b([t({type:Boolean})],s.prototype,"recordTrackerEnabled",void 0),o.b([t({type:String})],s.prototype,"_editTarget",void 0),s=o.b([e("gdq-totals")],s),window.GdqTotals=s})},function(e,t,n){"use strict";n.r(t);var o=n(1);window.addEventListener("load",()=>{const{customElement:e,property:t}=Polymer.decorators,n=nodecg.Replicant("gdq:currentLayout"),r=nodecg.Replicant("tweets");let s=class extends(Polymer.MutableData(Polymer.Element)){ready(){super.ready();const e=this.$.cover;n.on("change",t=>{switch(t){case"countdown":case"interview":case"standard_4":case"widescreen_4":case"gameboy_4":case"ds":e.style.display="flex";break;default:e.style.display="none"}}),r.on("change",e=>{this.$.empty.style.display=e.length>0?"none":"flex",this.tweets=e})}_sortTweets(e,t){return new Date(t.created_at)-new Date(e.created_at)}};o.b([t({type:Array})],s.prototype,"tweets",void 0),s=o.b([e("gdq-twitter-controls")],s),window.GdqTwitterControls=s})},function(e,t,n){"use strict";n.r(t);var o=n(1);window.addEventListener("load",()=>{const{customElement:e,property:t}=Polymer.decorators;let n=class extends(Polymer.MutableData(Polymer.Element)){accept(){nodecg.sendMessage("acceptTweet",this.value)}reject(){nodecg.sendMessage("rejectTweet",this.value.id_str)}};o.b([t({type:Object})],n.prototype,"value",void 0),n=o.b([e("tweet-item")],n),window.TweetItem=n})},function(e,t){window.addEventListener("load",()=>{Polymer({is:"time-input",properties:{invalid:{reflectToAttribute:!0,type:Boolean,value:!1},value:{notify:!0,type:String},_minutes:{type:Number},_seconds:{type:Number},validator:{type:String,value:"time-validator"}},behaviors:[Polymer.IronValidatableBehavior],observers:["_computeValue(_minutes,_seconds)"],setMS(e,t){this._minutes=e<10?`0${e}`:e,this._seconds=t<10?`0${t}`:t},_computeValue(e,t){this.value=`${e}:${t}`}})})},function(e,t,n){"use strict";window.addEventListener("load",()=>{Polymer({is:"time-validator",behaviors:[Polymer.IronValidatorBehavior],validate:e=>!e||e.match(/^[0-9]{0,2}:[0-9]{0,2}$/)})})},function(e,t){const n=document.getElementById("toggle");if(n){const e=nodecg.Replicant("recordTrackerEnabled");e.on("change",e=>{n.checked=Boolean(e)}),n.addEventListener("change",t=>{t&&t.target&&(e.value=Boolean(t.target.checked))})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,